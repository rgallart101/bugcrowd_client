# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from bugcrowd_client.models.create_target_group_request_data import CreateTargetGroupRequestData

class TestCreateTargetGroupRequestData(unittest.TestCase):
    """CreateTargetGroupRequestData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateTargetGroupRequestData:
        """Test CreateTargetGroupRequestData
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateTargetGroupRequestData`
        """
        model = CreateTargetGroupRequestData()
        if include_optional:
            return CreateTargetGroupRequestData(
                type = 'target_group',
                attributes = bugcrowd_client.models.create_target_group_request_data_attributes.CreateTargetGroupRequest_data_attributes(
                    name = '', 
                    description = '', 
                    in_scope = True, ),
                relationships = bugcrowd_client.models.create_target_group_request_data_relationships.CreateTargetGroupRequest_data_relationships(
                    program_brief = bugcrowd_client.models.program_brief_not_nullable.ProgramBriefNotNullable(
                        data = bugcrowd_client.models.program_brief_not_nullable_data.ProgramBriefNotNullable_data(
                            id = '', 
                            type = 'program_brief', ), ), 
                    reward_range = bugcrowd_client.models.reward_range_nullable.RewardRangeNullable(
                        data = bugcrowd_client.models.reward_range_nullable_data.RewardRangeNullable_data(
                            id = '', 
                            type = 'reward_range', ), ), 
                    targets = bugcrowd_client.models.targets_max20.TargetsMax20(
                        data = [
                            bugcrowd_client.models.target_not_nullable_data.TargetNotNullable_data(
                                id = , 
                                type = 'target', )
                            ], ), )
            )
        else:
            return CreateTargetGroupRequestData(
                type = 'target_group',
                attributes = bugcrowd_client.models.create_target_group_request_data_attributes.CreateTargetGroupRequest_data_attributes(
                    name = '', 
                    description = '', 
                    in_scope = True, ),
                relationships = bugcrowd_client.models.create_target_group_request_data_relationships.CreateTargetGroupRequest_data_relationships(
                    program_brief = bugcrowd_client.models.program_brief_not_nullable.ProgramBriefNotNullable(
                        data = bugcrowd_client.models.program_brief_not_nullable_data.ProgramBriefNotNullable_data(
                            id = '', 
                            type = 'program_brief', ), ), 
                    reward_range = bugcrowd_client.models.reward_range_nullable.RewardRangeNullable(
                        data = bugcrowd_client.models.reward_range_nullable_data.RewardRangeNullable_data(
                            id = '', 
                            type = 'reward_range', ), ), 
                    targets = bugcrowd_client.models.targets_max20.TargetsMax20(
                        data = [
                            bugcrowd_client.models.target_not_nullable_data.TargetNotNullable_data(
                                id = , 
                                type = 'target', )
                            ], ), ),
        )
        """

    def testCreateTargetGroupRequestData(self):
        """Test CreateTargetGroupRequestData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
