# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from bugcrowd_client.models.list_exernal_issue_response import ListExernalIssueResponse

class TestListExernalIssueResponse(unittest.TestCase):
    """ListExernalIssueResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListExernalIssueResponse:
        """Test ListExernalIssueResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListExernalIssueResponse`
        """
        model = ListExernalIssueResponse()
        if include_optional:
            return ListExernalIssueResponse(
                data = [
                    bugcrowd_client.models.external_issue.ExternalIssue(
                        id = '', 
                        type = 'external_issue', 
                        links = bugcrowd_client.models.self_link.SelfLink(
                            self = '', ), 
                        attributes = bugcrowd_client.models.external_issue_attributes.ExternalIssue_attributes(
                            remote_id = '', 
                            remote_url = null, ), 
                        relationships = bugcrowd_client.models.external_issue_relationships.ExternalIssue_relationships(
                            integration = bugcrowd_client.models.single_relationship.SingleRelationship(
                                links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                    related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                        href = '', ), ), 
                                data = bugcrowd_client.models.basic_object.BasicObject(
                                    id = '', 
                                    type = '', ), ), 
                            resource = bugcrowd_client.models.single_relationship.SingleRelationship(
                                links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                    related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                        href = '', ), ), 
                                data = bugcrowd_client.models.basic_object.BasicObject(
                                    id = '', 
                                    type = '', ), ), ), )
                    ],
                included = [
                    bugcrowd_client.models.submission.Submission(
                        id = '', 
                        type = 'submission', 
                        links = bugcrowd_client.models.self_link.SelfLink(
                            self = '', ), 
                        attributes = bugcrowd_client.models.submission_attributes.Submission_attributes(
                            bug_url = '', 
                            custom_fields = {
                                'key' : ''
                                }, 
                            description = '', 
                            duplicate = True, 
                            extra_info = '', 
                            http_request = '', 
                            last_transitioned_to_informational_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_transitioned_to_not_applicable_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_transitioned_to_not_reproducible_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_transitioned_to_out_of_scope_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_transitioned_to_resolved_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_transitioned_to_triaged_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_transitioned_to_unresolved_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            severity = 2, 
                            remediation_advice = '', 
                            submitted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            source = 'platform', 
                            state = 'new', 
                            title = '', 
                            vrt_id = '', 
                            vrt_version = '', 
                            vulnerability_references = '', ), 
                        relationships = bugcrowd_client.models.submission_relationships.Submission_relationships(
                            activities = bugcrowd_client.models.many_relationship.ManyRelationship(
                                links = bugcrowd_client.models.many_relationship_links.ManyRelationshipLinks(
                                    related = bugcrowd_client.models.many_relationship_links_related.ManyRelationshipLinks_related(
                                        href = '', 
                                        meta = bugcrowd_client.models.relationship_count_meta_data.RelationshipCountMetaData(
                                            count = 56, 
                                            total_hits = 56, ), ), ), 
                                data = [
                                    bugcrowd_client.models.basic_object.BasicObject(
                                        id = '', 
                                        type = '', )
                                    ], ), 
                            assignee = bugcrowd_client.models.single_relationship.SingleRelationship(
                                links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                    related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                        href = '', ), ), 
                                data = bugcrowd_client.models.basic_object.BasicObject(
                                    id = , 
                                    type = '', ), ), 
                            program = bugcrowd_client.models.single_relationship.SingleRelationship(
                                links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                    related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                        href = '', ), ), 
                                data = , ), 
                            claim_ticket = , 
                            comments = bugcrowd_client.models.many_relationship.ManyRelationship(
                                links = bugcrowd_client.models.many_relationship_links.ManyRelationshipLinks(
                                    related = bugcrowd_client.models.many_relationship_links_related.ManyRelationshipLinks_related(
                                        href = '', ), ), 
                                data = [
                                    
                                    ], ), 
                            cvss_vector = , 
                            duplicates = , 
                            duplicate_of = , 
                            external_issues = , 
                            file_attachments = , 
                            monetary_rewards = , 
                            target = , 
                            researcher = , ), )
                    ],
                links = bugcrowd_client.models.nav_links.NavLinks(
                    self = 'https://api.bugcrowd.com/self', 
                    next = '', 
                    previous = '', ),
                meta = bugcrowd_client.models.relationship_count_meta_data.RelationshipCountMetaData(
                    count = 56, 
                    total_hits = 56, )
            )
        else:
            return ListExernalIssueResponse(
                data = [
                    bugcrowd_client.models.external_issue.ExternalIssue(
                        id = '', 
                        type = 'external_issue', 
                        links = bugcrowd_client.models.self_link.SelfLink(
                            self = '', ), 
                        attributes = bugcrowd_client.models.external_issue_attributes.ExternalIssue_attributes(
                            remote_id = '', 
                            remote_url = null, ), 
                        relationships = bugcrowd_client.models.external_issue_relationships.ExternalIssue_relationships(
                            integration = bugcrowd_client.models.single_relationship.SingleRelationship(
                                links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                    related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                        href = '', ), ), 
                                data = bugcrowd_client.models.basic_object.BasicObject(
                                    id = '', 
                                    type = '', ), ), 
                            resource = bugcrowd_client.models.single_relationship.SingleRelationship(
                                links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                    related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                        href = '', ), ), 
                                data = bugcrowd_client.models.basic_object.BasicObject(
                                    id = '', 
                                    type = '', ), ), ), )
                    ],
        )
        """

    def testListExernalIssueResponse(self):
        """Test ListExernalIssueResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
