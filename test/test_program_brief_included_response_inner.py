# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from bugcrowd_client.models.program_brief_included_response_inner import ProgramBriefIncludedResponseInner

class TestProgramBriefIncludedResponseInner(unittest.TestCase):
    """ProgramBriefIncludedResponseInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProgramBriefIncludedResponseInner:
        """Test ProgramBriefIncludedResponseInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProgramBriefIncludedResponseInner`
        """
        model = ProgramBriefIncludedResponseInner()
        if include_optional:
            return ProgramBriefIncludedResponseInner(
                id = '',
                type = 'program',
                links = bugcrowd_client.models.self_link.SelfLink(
                    self = '', ),
                attributes = bugcrowd_client.models.target_group_attributes.TargetGroup_attributes(
                    name = '', 
                    description = '', 
                    in_scope = True, ),
                relationships = bugcrowd_client.models.target_group_relationships.TargetGroup_relationships(
                    targets = bugcrowd_client.models.many_relationship.ManyRelationship(
                        links = bugcrowd_client.models.many_relationship_links.ManyRelationshipLinks(
                            related = bugcrowd_client.models.many_relationship_links_related.ManyRelationshipLinks_related(
                                href = '', 
                                meta = bugcrowd_client.models.relationship_count_meta_data.RelationshipCountMetaData(
                                    count = 56, 
                                    total_hits = 56, ), ), ), 
                        data = [
                            bugcrowd_client.models.basic_object.BasicObject(
                                id = '', 
                                type = '', )
                            ], ), 
                    program_brief = bugcrowd_client.models.single_relationship.SingleRelationship(
                        links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                            related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                href = '', ), ), 
                        data = bugcrowd_client.models.basic_object.BasicObject(
                            id = '', 
                            type = '', ), ), 
                    reward_range = bugcrowd_client.models.single_relationship.SingleRelationship(
                        links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                            related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                href = '', ), ), 
                        data = , ), )
            )
        else:
            return ProgramBriefIncludedResponseInner(
                id = '',
                type = 'program',
        )
        """

    def testProgramBriefIncludedResponseInner(self):
        """Test ProgramBriefIncludedResponseInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
