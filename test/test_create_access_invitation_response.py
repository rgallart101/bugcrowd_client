# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from bugcrowd_client.models.create_access_invitation_response import CreateAccessInvitationResponse

class TestCreateAccessInvitationResponse(unittest.TestCase):
    """CreateAccessInvitationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateAccessInvitationResponse:
        """Test CreateAccessInvitationResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateAccessInvitationResponse`
        """
        model = CreateAccessInvitationResponse()
        if include_optional:
            return CreateAccessInvitationResponse(
                data = bugcrowd_client.models.access_invitation.AccessInvitation(
                    id = '', 
                    type = 'access_invitation', 
                    links = bugcrowd_client.models.self_link.SelfLink(
                        self = '', ), 
                    attributes = bugcrowd_client.models.access_invitation_attributes.AccessInvitation_attributes(
                        approved_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        grantee_email = '', ), 
                    relationships = bugcrowd_client.models.access_invitation_relationships.AccessInvitation_relationships(
                        granting_identity = bugcrowd_client.models.single_relationship.SingleRelationship(
                            links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                    href = '', ), ), 
                            data = bugcrowd_client.models.basic_object.BasicObject(
                                id = '', 
                                type = '', ), ), 
                        organization = bugcrowd_client.models.single_relationship.SingleRelationship(
                            links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                    href = '', ), ), 
                            data = bugcrowd_client.models.basic_object.BasicObject(
                                id = '', 
                                type = '', ), ), 
                        resource_roles = bugcrowd_client.models.many_relationship.ManyRelationship(
                            links = bugcrowd_client.models.many_relationship_links.ManyRelationshipLinks(
                                related = bugcrowd_client.models.many_relationship_links_related.ManyRelationshipLinks_related(
                                    href = '', 
                                    meta = bugcrowd_client.models.relationship_count_meta_data.RelationshipCountMetaData(
                                        count = 56, 
                                        total_hits = 56, ), ), ), 
                            data = [
                                
                                ], ), ), ),
                included = [
                    bugcrowd_client.models.resource_role.ResourceRole(
                        id = '', 
                        type = 'resource_role', 
                        links = bugcrowd_client.models.self_link.SelfLink(
                            self = '', ), 
                        attributes = bugcrowd_client.models.resource_role_attributes.ResourceRole_attributes(
                            role = 'owner', ), 
                        relationships = bugcrowd_client.models.resource_role_relationships.ResourceRole_relationships(
                            access_invitation = bugcrowd_client.models.single_relationship.SingleRelationship(
                                links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                    related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                        href = '', ), ), 
                                data = bugcrowd_client.models.basic_object.BasicObject(
                                    id = '', 
                                    type = '', ), ), 
                            resource = bugcrowd_client.models.single_relationship.SingleRelationship(
                                links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                    related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                        href = '', ), ), 
                                data = bugcrowd_client.models.basic_object.BasicObject(
                                    id = '', 
                                    type = '', ), ), ), )
                    ]
            )
        else:
            return CreateAccessInvitationResponse(
                data = bugcrowd_client.models.access_invitation.AccessInvitation(
                    id = '', 
                    type = 'access_invitation', 
                    links = bugcrowd_client.models.self_link.SelfLink(
                        self = '', ), 
                    attributes = bugcrowd_client.models.access_invitation_attributes.AccessInvitation_attributes(
                        approved_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        grantee_email = '', ), 
                    relationships = bugcrowd_client.models.access_invitation_relationships.AccessInvitation_relationships(
                        granting_identity = bugcrowd_client.models.single_relationship.SingleRelationship(
                            links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                    href = '', ), ), 
                            data = bugcrowd_client.models.basic_object.BasicObject(
                                id = '', 
                                type = '', ), ), 
                        organization = bugcrowd_client.models.single_relationship.SingleRelationship(
                            links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                    href = '', ), ), 
                            data = bugcrowd_client.models.basic_object.BasicObject(
                                id = '', 
                                type = '', ), ), 
                        resource_roles = bugcrowd_client.models.many_relationship.ManyRelationship(
                            links = bugcrowd_client.models.many_relationship_links.ManyRelationshipLinks(
                                related = bugcrowd_client.models.many_relationship_links_related.ManyRelationshipLinks_related(
                                    href = '', 
                                    meta = bugcrowd_client.models.relationship_count_meta_data.RelationshipCountMetaData(
                                        count = 56, 
                                        total_hits = 56, ), ), ), 
                            data = [
                                
                                ], ), ), ),
                included = [
                    bugcrowd_client.models.resource_role.ResourceRole(
                        id = '', 
                        type = 'resource_role', 
                        links = bugcrowd_client.models.self_link.SelfLink(
                            self = '', ), 
                        attributes = bugcrowd_client.models.resource_role_attributes.ResourceRole_attributes(
                            role = 'owner', ), 
                        relationships = bugcrowd_client.models.resource_role_relationships.ResourceRole_relationships(
                            access_invitation = bugcrowd_client.models.single_relationship.SingleRelationship(
                                links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                    related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                        href = '', ), ), 
                                data = bugcrowd_client.models.basic_object.BasicObject(
                                    id = '', 
                                    type = '', ), ), 
                            resource = bugcrowd_client.models.single_relationship.SingleRelationship(
                                links = bugcrowd_client.models.single_relationship_links.SingleRelationshipLinks(
                                    related = bugcrowd_client.models.single_relationship_links_related.SingleRelationshipLinks_related(
                                        href = '', ), ), 
                                data = bugcrowd_client.models.basic_object.BasicObject(
                                    id = '', 
                                    type = '', ), ), ), )
                    ],
        )
        """

    def testCreateAccessInvitationResponse(self):
        """Test CreateAccessInvitationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
