# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from datetime import date

from pydantic import StrictBool, StrictStr, field_validator

from typing import List, Optional

from bugcrowd_client.models.create_submission_request import CreateSubmissionRequest
from bugcrowd_client.models.create_submission_response import CreateSubmissionResponse
from bugcrowd_client.models.get_submission_response import GetSubmissionResponse
from bugcrowd_client.models.list_submissions_response import ListSubmissionsResponse
from bugcrowd_client.models.update_submission_request import UpdateSubmissionRequest
from bugcrowd_client.models.update_submission_response import UpdateSubmissionResponse

from bugcrowd_client.api_client import ApiClient
from bugcrowd_client.api_response import ApiResponse
from bugcrowd_client.rest import RESTResponseType


class SubmissionResourceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_submission(
        self,
        create_submission_request: Annotated[CreateSubmissionRequest, Field(description="A submission resource with a program relationship and an optional target relationship.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateSubmissionResponse:
        """Create submission

        Create a submission within a program.

        :param create_submission_request: A submission resource with a program relationship and an optional target relationship. (required)
        :type create_submission_request: CreateSubmissionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_submission_serialize(
            create_submission_request=create_submission_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateSubmissionResponse",
            '400': "ErrorContent",
            '403': "ErrorContent",
            '404': "ErrorContent",
            '409': "ErrorContent",
            '422': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_submission_with_http_info(
        self,
        create_submission_request: Annotated[CreateSubmissionRequest, Field(description="A submission resource with a program relationship and an optional target relationship.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateSubmissionResponse]:
        """Create submission

        Create a submission within a program.

        :param create_submission_request: A submission resource with a program relationship and an optional target relationship. (required)
        :type create_submission_request: CreateSubmissionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_submission_serialize(
            create_submission_request=create_submission_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateSubmissionResponse",
            '400': "ErrorContent",
            '403': "ErrorContent",
            '404': "ErrorContent",
            '409': "ErrorContent",
            '422': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_submission_without_preload_content(
        self,
        create_submission_request: Annotated[CreateSubmissionRequest, Field(description="A submission resource with a program relationship and an optional target relationship.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create submission

        Create a submission within a program.

        :param create_submission_request: A submission resource with a program relationship and an optional target relationship. (required)
        :type create_submission_request: CreateSubmissionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_submission_serialize(
            create_submission_request=create_submission_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateSubmissionResponse",
            '400': "ErrorContent",
            '403': "ErrorContent",
            '404': "ErrorContent",
            '409': "ErrorContent",
            '422': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_submission_serialize(
        self,
        create_submission_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_submission_request is not None:
            _body_params = create_submission_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.bugcrowd.v4+json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.bugcrowd.v4+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/submissions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_submission(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the resource in uuid format")],
        bugcrowd_version: Annotated[Optional[StrictStr], Field(description="The request header used to test new API versions before updating the pinned account version")] = None,
        fields_activity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `activity` resources. If not provided, all fields will be returned")] = None,
        fields_claim_ticket: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `claim_ticket` resources. If not provided, all fields will be returned")] = None,
        fields_comment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `comment` resources. If not provided, all fields will be returned")] = None,
        fields_cvss_vector: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Limit fields for `cvss_vector` resources. If not provided, all fields will be returned")] = None,
        fields_external_issue: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `external_issue` resources. If not provided, all fields will be returned")] = None,
        fields_file_attachment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `file_attachment` resources. If not provided, all fields will be returned")] = None,
        fields_identity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `identity` resources. If not provided, all fields will be returned")] = None,
        fields_monetary_reward: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=14)]], Field(description="Limit fields for `monetary_reward` resources. If not provided, all fields will be returned")] = None,
        fields_organization: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `organization` resources. If not provided, all fields will be returned")] = None,
        fields_payment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `payment` resources. If not provided, all fields will be returned")] = None,
        fields_program: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `program` resources. If not provided, all fields will be returned")] = None,
        fields_program_brief: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=9)]], Field(description="Limit fields for `program_brief` resources. If not provided, all fields will be returned")] = None,
        fields_submission: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=35)]], Field(description="Limit fields for `submission` resources. If not provided, all fields will be returned")] = None,
        fields_target: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `target` resources. If not provided, all fields will be returned")] = None,
        fields_target_group: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `target_group` resources. If not provided, all fields will be returned")] = None,
        include: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="Related associations that will be returned as a flat list of objects.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSubmissionResponse:
        """Fetch submission

        Returns a single submission by UUID.

        :param id: The ID of the resource in uuid format (required)
        :type id: str
        :param bugcrowd_version: The request header used to test new API versions before updating the pinned account version
        :type bugcrowd_version: str
        :param fields_activity: Limit fields for `activity` resources. If not provided, all fields will be returned
        :type fields_activity: List[str]
        :param fields_claim_ticket: Limit fields for `claim_ticket` resources. If not provided, all fields will be returned
        :type fields_claim_ticket: List[str]
        :param fields_comment: Limit fields for `comment` resources. If not provided, all fields will be returned
        :type fields_comment: List[str]
        :param fields_cvss_vector: Limit fields for `cvss_vector` resources. If not provided, all fields will be returned
        :type fields_cvss_vector: List[str]
        :param fields_external_issue: Limit fields for `external_issue` resources. If not provided, all fields will be returned
        :type fields_external_issue: List[str]
        :param fields_file_attachment: Limit fields for `file_attachment` resources. If not provided, all fields will be returned
        :type fields_file_attachment: List[str]
        :param fields_identity: Limit fields for `identity` resources. If not provided, all fields will be returned
        :type fields_identity: List[str]
        :param fields_monetary_reward: Limit fields for `monetary_reward` resources. If not provided, all fields will be returned
        :type fields_monetary_reward: List[str]
        :param fields_organization: Limit fields for `organization` resources. If not provided, all fields will be returned
        :type fields_organization: List[str]
        :param fields_payment: Limit fields for `payment` resources. If not provided, all fields will be returned
        :type fields_payment: List[str]
        :param fields_program: Limit fields for `program` resources. If not provided, all fields will be returned
        :type fields_program: List[str]
        :param fields_program_brief: Limit fields for `program_brief` resources. If not provided, all fields will be returned
        :type fields_program_brief: List[str]
        :param fields_submission: Limit fields for `submission` resources. If not provided, all fields will be returned
        :type fields_submission: List[str]
        :param fields_target: Limit fields for `target` resources. If not provided, all fields will be returned
        :type fields_target: List[str]
        :param fields_target_group: Limit fields for `target_group` resources. If not provided, all fields will be returned
        :type fields_target_group: List[str]
        :param include: Related associations that will be returned as a flat list of objects.
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_submission_serialize(
            id=id,
            bugcrowd_version=bugcrowd_version,
            fields_activity=fields_activity,
            fields_claim_ticket=fields_claim_ticket,
            fields_comment=fields_comment,
            fields_cvss_vector=fields_cvss_vector,
            fields_external_issue=fields_external_issue,
            fields_file_attachment=fields_file_attachment,
            fields_identity=fields_identity,
            fields_monetary_reward=fields_monetary_reward,
            fields_organization=fields_organization,
            fields_payment=fields_payment,
            fields_program=fields_program,
            fields_program_brief=fields_program_brief,
            fields_submission=fields_submission,
            fields_target=fields_target,
            fields_target_group=fields_target_group,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSubmissionResponse",
            '400': "ErrorContent",
            '404': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_submission_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the resource in uuid format")],
        bugcrowd_version: Annotated[Optional[StrictStr], Field(description="The request header used to test new API versions before updating the pinned account version")] = None,
        fields_activity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `activity` resources. If not provided, all fields will be returned")] = None,
        fields_claim_ticket: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `claim_ticket` resources. If not provided, all fields will be returned")] = None,
        fields_comment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `comment` resources. If not provided, all fields will be returned")] = None,
        fields_cvss_vector: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Limit fields for `cvss_vector` resources. If not provided, all fields will be returned")] = None,
        fields_external_issue: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `external_issue` resources. If not provided, all fields will be returned")] = None,
        fields_file_attachment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `file_attachment` resources. If not provided, all fields will be returned")] = None,
        fields_identity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `identity` resources. If not provided, all fields will be returned")] = None,
        fields_monetary_reward: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=14)]], Field(description="Limit fields for `monetary_reward` resources. If not provided, all fields will be returned")] = None,
        fields_organization: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `organization` resources. If not provided, all fields will be returned")] = None,
        fields_payment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `payment` resources. If not provided, all fields will be returned")] = None,
        fields_program: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `program` resources. If not provided, all fields will be returned")] = None,
        fields_program_brief: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=9)]], Field(description="Limit fields for `program_brief` resources. If not provided, all fields will be returned")] = None,
        fields_submission: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=35)]], Field(description="Limit fields for `submission` resources. If not provided, all fields will be returned")] = None,
        fields_target: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `target` resources. If not provided, all fields will be returned")] = None,
        fields_target_group: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `target_group` resources. If not provided, all fields will be returned")] = None,
        include: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="Related associations that will be returned as a flat list of objects.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSubmissionResponse]:
        """Fetch submission

        Returns a single submission by UUID.

        :param id: The ID of the resource in uuid format (required)
        :type id: str
        :param bugcrowd_version: The request header used to test new API versions before updating the pinned account version
        :type bugcrowd_version: str
        :param fields_activity: Limit fields for `activity` resources. If not provided, all fields will be returned
        :type fields_activity: List[str]
        :param fields_claim_ticket: Limit fields for `claim_ticket` resources. If not provided, all fields will be returned
        :type fields_claim_ticket: List[str]
        :param fields_comment: Limit fields for `comment` resources. If not provided, all fields will be returned
        :type fields_comment: List[str]
        :param fields_cvss_vector: Limit fields for `cvss_vector` resources. If not provided, all fields will be returned
        :type fields_cvss_vector: List[str]
        :param fields_external_issue: Limit fields for `external_issue` resources. If not provided, all fields will be returned
        :type fields_external_issue: List[str]
        :param fields_file_attachment: Limit fields for `file_attachment` resources. If not provided, all fields will be returned
        :type fields_file_attachment: List[str]
        :param fields_identity: Limit fields for `identity` resources. If not provided, all fields will be returned
        :type fields_identity: List[str]
        :param fields_monetary_reward: Limit fields for `monetary_reward` resources. If not provided, all fields will be returned
        :type fields_monetary_reward: List[str]
        :param fields_organization: Limit fields for `organization` resources. If not provided, all fields will be returned
        :type fields_organization: List[str]
        :param fields_payment: Limit fields for `payment` resources. If not provided, all fields will be returned
        :type fields_payment: List[str]
        :param fields_program: Limit fields for `program` resources. If not provided, all fields will be returned
        :type fields_program: List[str]
        :param fields_program_brief: Limit fields for `program_brief` resources. If not provided, all fields will be returned
        :type fields_program_brief: List[str]
        :param fields_submission: Limit fields for `submission` resources. If not provided, all fields will be returned
        :type fields_submission: List[str]
        :param fields_target: Limit fields for `target` resources. If not provided, all fields will be returned
        :type fields_target: List[str]
        :param fields_target_group: Limit fields for `target_group` resources. If not provided, all fields will be returned
        :type fields_target_group: List[str]
        :param include: Related associations that will be returned as a flat list of objects.
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_submission_serialize(
            id=id,
            bugcrowd_version=bugcrowd_version,
            fields_activity=fields_activity,
            fields_claim_ticket=fields_claim_ticket,
            fields_comment=fields_comment,
            fields_cvss_vector=fields_cvss_vector,
            fields_external_issue=fields_external_issue,
            fields_file_attachment=fields_file_attachment,
            fields_identity=fields_identity,
            fields_monetary_reward=fields_monetary_reward,
            fields_organization=fields_organization,
            fields_payment=fields_payment,
            fields_program=fields_program,
            fields_program_brief=fields_program_brief,
            fields_submission=fields_submission,
            fields_target=fields_target,
            fields_target_group=fields_target_group,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSubmissionResponse",
            '400': "ErrorContent",
            '404': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_submission_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the resource in uuid format")],
        bugcrowd_version: Annotated[Optional[StrictStr], Field(description="The request header used to test new API versions before updating the pinned account version")] = None,
        fields_activity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `activity` resources. If not provided, all fields will be returned")] = None,
        fields_claim_ticket: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `claim_ticket` resources. If not provided, all fields will be returned")] = None,
        fields_comment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `comment` resources. If not provided, all fields will be returned")] = None,
        fields_cvss_vector: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Limit fields for `cvss_vector` resources. If not provided, all fields will be returned")] = None,
        fields_external_issue: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `external_issue` resources. If not provided, all fields will be returned")] = None,
        fields_file_attachment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `file_attachment` resources. If not provided, all fields will be returned")] = None,
        fields_identity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `identity` resources. If not provided, all fields will be returned")] = None,
        fields_monetary_reward: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=14)]], Field(description="Limit fields for `monetary_reward` resources. If not provided, all fields will be returned")] = None,
        fields_organization: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `organization` resources. If not provided, all fields will be returned")] = None,
        fields_payment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `payment` resources. If not provided, all fields will be returned")] = None,
        fields_program: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `program` resources. If not provided, all fields will be returned")] = None,
        fields_program_brief: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=9)]], Field(description="Limit fields for `program_brief` resources. If not provided, all fields will be returned")] = None,
        fields_submission: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=35)]], Field(description="Limit fields for `submission` resources. If not provided, all fields will be returned")] = None,
        fields_target: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `target` resources. If not provided, all fields will be returned")] = None,
        fields_target_group: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `target_group` resources. If not provided, all fields will be returned")] = None,
        include: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="Related associations that will be returned as a flat list of objects.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch submission

        Returns a single submission by UUID.

        :param id: The ID of the resource in uuid format (required)
        :type id: str
        :param bugcrowd_version: The request header used to test new API versions before updating the pinned account version
        :type bugcrowd_version: str
        :param fields_activity: Limit fields for `activity` resources. If not provided, all fields will be returned
        :type fields_activity: List[str]
        :param fields_claim_ticket: Limit fields for `claim_ticket` resources. If not provided, all fields will be returned
        :type fields_claim_ticket: List[str]
        :param fields_comment: Limit fields for `comment` resources. If not provided, all fields will be returned
        :type fields_comment: List[str]
        :param fields_cvss_vector: Limit fields for `cvss_vector` resources. If not provided, all fields will be returned
        :type fields_cvss_vector: List[str]
        :param fields_external_issue: Limit fields for `external_issue` resources. If not provided, all fields will be returned
        :type fields_external_issue: List[str]
        :param fields_file_attachment: Limit fields for `file_attachment` resources. If not provided, all fields will be returned
        :type fields_file_attachment: List[str]
        :param fields_identity: Limit fields for `identity` resources. If not provided, all fields will be returned
        :type fields_identity: List[str]
        :param fields_monetary_reward: Limit fields for `monetary_reward` resources. If not provided, all fields will be returned
        :type fields_monetary_reward: List[str]
        :param fields_organization: Limit fields for `organization` resources. If not provided, all fields will be returned
        :type fields_organization: List[str]
        :param fields_payment: Limit fields for `payment` resources. If not provided, all fields will be returned
        :type fields_payment: List[str]
        :param fields_program: Limit fields for `program` resources. If not provided, all fields will be returned
        :type fields_program: List[str]
        :param fields_program_brief: Limit fields for `program_brief` resources. If not provided, all fields will be returned
        :type fields_program_brief: List[str]
        :param fields_submission: Limit fields for `submission` resources. If not provided, all fields will be returned
        :type fields_submission: List[str]
        :param fields_target: Limit fields for `target` resources. If not provided, all fields will be returned
        :type fields_target: List[str]
        :param fields_target_group: Limit fields for `target_group` resources. If not provided, all fields will be returned
        :type fields_target_group: List[str]
        :param include: Related associations that will be returned as a flat list of objects.
        :type include: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_submission_serialize(
            id=id,
            bugcrowd_version=bugcrowd_version,
            fields_activity=fields_activity,
            fields_claim_ticket=fields_claim_ticket,
            fields_comment=fields_comment,
            fields_cvss_vector=fields_cvss_vector,
            fields_external_issue=fields_external_issue,
            fields_file_attachment=fields_file_attachment,
            fields_identity=fields_identity,
            fields_monetary_reward=fields_monetary_reward,
            fields_organization=fields_organization,
            fields_payment=fields_payment,
            fields_program=fields_program,
            fields_program_brief=fields_program_brief,
            fields_submission=fields_submission,
            fields_target=fields_target,
            fields_target_group=fields_target_group,
            include=include,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSubmissionResponse",
            '400': "ErrorContent",
            '404': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_submission_serialize(
        self,
        id,
        bugcrowd_version,
        fields_activity,
        fields_claim_ticket,
        fields_comment,
        fields_cvss_vector,
        fields_external_issue,
        fields_file_attachment,
        fields_identity,
        fields_monetary_reward,
        fields_organization,
        fields_payment,
        fields_program,
        fields_program_brief,
        fields_submission,
        fields_target,
        fields_target_group,
        include,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[activity]': 'csv',
            'fields[claim_ticket]': 'csv',
            'fields[comment]': 'csv',
            'fields[cvss_vector]': 'csv',
            'fields[external_issue]': 'csv',
            'fields[file_attachment]': 'csv',
            'fields[identity]': 'csv',
            'fields[monetary_reward]': 'csv',
            'fields[organization]': 'csv',
            'fields[payment]': 'csv',
            'fields[program]': 'csv',
            'fields[program_brief]': 'csv',
            'fields[submission]': 'csv',
            'fields[target]': 'csv',
            'fields[target_group]': 'csv',
            'include': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if fields_activity is not None:
            
            _query_params.append(('fields[activity]', fields_activity))
            
        if fields_claim_ticket is not None:
            
            _query_params.append(('fields[claim_ticket]', fields_claim_ticket))
            
        if fields_comment is not None:
            
            _query_params.append(('fields[comment]', fields_comment))
            
        if fields_cvss_vector is not None:
            
            _query_params.append(('fields[cvss_vector]', fields_cvss_vector))
            
        if fields_external_issue is not None:
            
            _query_params.append(('fields[external_issue]', fields_external_issue))
            
        if fields_file_attachment is not None:
            
            _query_params.append(('fields[file_attachment]', fields_file_attachment))
            
        if fields_identity is not None:
            
            _query_params.append(('fields[identity]', fields_identity))
            
        if fields_monetary_reward is not None:
            
            _query_params.append(('fields[monetary_reward]', fields_monetary_reward))
            
        if fields_organization is not None:
            
            _query_params.append(('fields[organization]', fields_organization))
            
        if fields_payment is not None:
            
            _query_params.append(('fields[payment]', fields_payment))
            
        if fields_program is not None:
            
            _query_params.append(('fields[program]', fields_program))
            
        if fields_program_brief is not None:
            
            _query_params.append(('fields[program_brief]', fields_program_brief))
            
        if fields_submission is not None:
            
            _query_params.append(('fields[submission]', fields_submission))
            
        if fields_target is not None:
            
            _query_params.append(('fields[target]', fields_target))
            
        if fields_target_group is not None:
            
            _query_params.append(('fields[target_group]', fields_target_group))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        # process the header parameters
        if bugcrowd_version is not None:
            _header_params['Bugcrowd-Version'] = bugcrowd_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.bugcrowd.v4+json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/submissions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_submissions(
        self,
        bugcrowd_version: Annotated[Optional[StrictStr], Field(description="The request header used to test new API versions before updating the pinned account version")] = None,
        fields_activity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `activity` resources. If not provided, all fields will be returned")] = None,
        fields_claim_ticket: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `claim_ticket` resources. If not provided, all fields will be returned")] = None,
        fields_comment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `comment` resources. If not provided, all fields will be returned")] = None,
        fields_cvss_vector: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Limit fields for `cvss_vector` resources. If not provided, all fields will be returned")] = None,
        fields_external_issue: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `external_issue` resources. If not provided, all fields will be returned")] = None,
        fields_file_attachment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `file_attachment` resources. If not provided, all fields will be returned")] = None,
        fields_identity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `identity` resources. If not provided, all fields will be returned")] = None,
        fields_monetary_reward: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=14)]], Field(description="Limit fields for `monetary_reward` resources. If not provided, all fields will be returned")] = None,
        fields_organization: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `organization` resources. If not provided, all fields will be returned")] = None,
        fields_payment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `payment` resources. If not provided, all fields will be returned")] = None,
        fields_program: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `program` resources. If not provided, all fields will be returned")] = None,
        fields_program_brief: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=9)]], Field(description="Limit fields for `program_brief` resources. If not provided, all fields will be returned")] = None,
        fields_submission: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=35)]], Field(description="Limit fields for `submission` resources. If not provided, all fields will be returned")] = None,
        fields_target: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `target` resources. If not provided, all fields will be returned")] = None,
        fields_target_group: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `target_group` resources. If not provided, all fields will be returned")] = None,
        page_limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=0)]], Field(description="Limit parameter for pagination (default page[limit] = 25)")] = None,
        page_offset: Annotated[Optional[Annotated[int, Field(le=9900, strict=True, ge=0)]], Field(description="Offset parameter for pagination (default page[offset] = 0 == first page)")] = None,
        include: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="Related associations that will be returned as a flat list of objects.")] = None,
        filter_assignee: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by assignee. Use either an email address or the keywords `me` or `none` ")] = None,
        filter_blocked_by: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Filter submissions by blocked_by")] = None,
        filter_duplicate: Annotated[Optional[StrictBool], Field(description="Filter submissions by duplicate")] = None,
        filter_payments: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter submissions by payment information")] = None,
        filter_points: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter submissions by points")] = None,
        filter_program: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by program")] = None,
        filter_researcher: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by researcher")] = None,
        filter_retest: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Filter submissions by retest")] = None,
        filter_search: Annotated[Optional[StrictStr], Field(description="Filter submissions by searching through title, description, and comment text")] = None,
        filter_severity: Annotated[Optional[Annotated[List[Annotated[int, Field(le=5, strict=True, ge=1)]], Field(max_length=4)]], Field(description="Filter submissions by severity")] = None,
        filter_source: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=7)]], Field(description="Filter submissions by source")] = None,
        filter_state: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=8)]], Field(description="Filter submissions by state")] = None,
        filter_submitted: Annotated[Optional[date], Field(description="Filter submissions by submitted timestamp")] = None,
        filter_target: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by target name")] = None,
        filter_target_type: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=8)]], Field(description="Filter submissions by target_type")] = None,
        filter_updated: Annotated[Optional[date], Field(description="Filter submissions by updated timestamp")] = None,
        filter_vrt: Annotated[Optional[StrictStr], Field(description="Filter submissions by `.` separated vrt id")] = None,
        sort: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Tokenized search sort options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListSubmissionsResponse:
        """Index submissions

        Returns a filtered list of submissions based on tokenized search and sort parameters.

        :param bugcrowd_version: The request header used to test new API versions before updating the pinned account version
        :type bugcrowd_version: str
        :param fields_activity: Limit fields for `activity` resources. If not provided, all fields will be returned
        :type fields_activity: List[str]
        :param fields_claim_ticket: Limit fields for `claim_ticket` resources. If not provided, all fields will be returned
        :type fields_claim_ticket: List[str]
        :param fields_comment: Limit fields for `comment` resources. If not provided, all fields will be returned
        :type fields_comment: List[str]
        :param fields_cvss_vector: Limit fields for `cvss_vector` resources. If not provided, all fields will be returned
        :type fields_cvss_vector: List[str]
        :param fields_external_issue: Limit fields for `external_issue` resources. If not provided, all fields will be returned
        :type fields_external_issue: List[str]
        :param fields_file_attachment: Limit fields for `file_attachment` resources. If not provided, all fields will be returned
        :type fields_file_attachment: List[str]
        :param fields_identity: Limit fields for `identity` resources. If not provided, all fields will be returned
        :type fields_identity: List[str]
        :param fields_monetary_reward: Limit fields for `monetary_reward` resources. If not provided, all fields will be returned
        :type fields_monetary_reward: List[str]
        :param fields_organization: Limit fields for `organization` resources. If not provided, all fields will be returned
        :type fields_organization: List[str]
        :param fields_payment: Limit fields for `payment` resources. If not provided, all fields will be returned
        :type fields_payment: List[str]
        :param fields_program: Limit fields for `program` resources. If not provided, all fields will be returned
        :type fields_program: List[str]
        :param fields_program_brief: Limit fields for `program_brief` resources. If not provided, all fields will be returned
        :type fields_program_brief: List[str]
        :param fields_submission: Limit fields for `submission` resources. If not provided, all fields will be returned
        :type fields_submission: List[str]
        :param fields_target: Limit fields for `target` resources. If not provided, all fields will be returned
        :type fields_target: List[str]
        :param fields_target_group: Limit fields for `target_group` resources. If not provided, all fields will be returned
        :type fields_target_group: List[str]
        :param page_limit: Limit parameter for pagination (default page[limit] = 25)
        :type page_limit: int
        :param page_offset: Offset parameter for pagination (default page[offset] = 0 == first page)
        :type page_offset: int
        :param include: Related associations that will be returned as a flat list of objects.
        :type include: List[str]
        :param filter_assignee: Filter submissions by assignee. Use either an email address or the keywords `me` or `none` 
        :type filter_assignee: List[str]
        :param filter_blocked_by: Filter submissions by blocked_by
        :type filter_blocked_by: List[str]
        :param filter_duplicate: Filter submissions by duplicate
        :type filter_duplicate: bool
        :param filter_payments: Filter submissions by payment information
        :type filter_payments: List[str]
        :param filter_points: Filter submissions by points
        :type filter_points: List[str]
        :param filter_program: Filter submissions by program
        :type filter_program: List[str]
        :param filter_researcher: Filter submissions by researcher
        :type filter_researcher: List[str]
        :param filter_retest: Filter submissions by retest
        :type filter_retest: List[str]
        :param filter_search: Filter submissions by searching through title, description, and comment text
        :type filter_search: str
        :param filter_severity: Filter submissions by severity
        :type filter_severity: List[int]
        :param filter_source: Filter submissions by source
        :type filter_source: List[str]
        :param filter_state: Filter submissions by state
        :type filter_state: List[str]
        :param filter_submitted: Filter submissions by submitted timestamp
        :type filter_submitted: date
        :param filter_target: Filter submissions by target name
        :type filter_target: List[str]
        :param filter_target_type: Filter submissions by target_type
        :type filter_target_type: List[str]
        :param filter_updated: Filter submissions by updated timestamp
        :type filter_updated: date
        :param filter_vrt: Filter submissions by `.` separated vrt id
        :type filter_vrt: str
        :param sort: Tokenized search sort options
        :type sort: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_submissions_serialize(
            bugcrowd_version=bugcrowd_version,
            fields_activity=fields_activity,
            fields_claim_ticket=fields_claim_ticket,
            fields_comment=fields_comment,
            fields_cvss_vector=fields_cvss_vector,
            fields_external_issue=fields_external_issue,
            fields_file_attachment=fields_file_attachment,
            fields_identity=fields_identity,
            fields_monetary_reward=fields_monetary_reward,
            fields_organization=fields_organization,
            fields_payment=fields_payment,
            fields_program=fields_program,
            fields_program_brief=fields_program_brief,
            fields_submission=fields_submission,
            fields_target=fields_target,
            fields_target_group=fields_target_group,
            page_limit=page_limit,
            page_offset=page_offset,
            include=include,
            filter_assignee=filter_assignee,
            filter_blocked_by=filter_blocked_by,
            filter_duplicate=filter_duplicate,
            filter_payments=filter_payments,
            filter_points=filter_points,
            filter_program=filter_program,
            filter_researcher=filter_researcher,
            filter_retest=filter_retest,
            filter_search=filter_search,
            filter_severity=filter_severity,
            filter_source=filter_source,
            filter_state=filter_state,
            filter_submitted=filter_submitted,
            filter_target=filter_target,
            filter_target_type=filter_target_type,
            filter_updated=filter_updated,
            filter_vrt=filter_vrt,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSubmissionsResponse",
            '400': "ErrorContent",
            '404': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_submissions_with_http_info(
        self,
        bugcrowd_version: Annotated[Optional[StrictStr], Field(description="The request header used to test new API versions before updating the pinned account version")] = None,
        fields_activity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `activity` resources. If not provided, all fields will be returned")] = None,
        fields_claim_ticket: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `claim_ticket` resources. If not provided, all fields will be returned")] = None,
        fields_comment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `comment` resources. If not provided, all fields will be returned")] = None,
        fields_cvss_vector: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Limit fields for `cvss_vector` resources. If not provided, all fields will be returned")] = None,
        fields_external_issue: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `external_issue` resources. If not provided, all fields will be returned")] = None,
        fields_file_attachment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `file_attachment` resources. If not provided, all fields will be returned")] = None,
        fields_identity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `identity` resources. If not provided, all fields will be returned")] = None,
        fields_monetary_reward: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=14)]], Field(description="Limit fields for `monetary_reward` resources. If not provided, all fields will be returned")] = None,
        fields_organization: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `organization` resources. If not provided, all fields will be returned")] = None,
        fields_payment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `payment` resources. If not provided, all fields will be returned")] = None,
        fields_program: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `program` resources. If not provided, all fields will be returned")] = None,
        fields_program_brief: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=9)]], Field(description="Limit fields for `program_brief` resources. If not provided, all fields will be returned")] = None,
        fields_submission: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=35)]], Field(description="Limit fields for `submission` resources. If not provided, all fields will be returned")] = None,
        fields_target: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `target` resources. If not provided, all fields will be returned")] = None,
        fields_target_group: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `target_group` resources. If not provided, all fields will be returned")] = None,
        page_limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=0)]], Field(description="Limit parameter for pagination (default page[limit] = 25)")] = None,
        page_offset: Annotated[Optional[Annotated[int, Field(le=9900, strict=True, ge=0)]], Field(description="Offset parameter for pagination (default page[offset] = 0 == first page)")] = None,
        include: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="Related associations that will be returned as a flat list of objects.")] = None,
        filter_assignee: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by assignee. Use either an email address or the keywords `me` or `none` ")] = None,
        filter_blocked_by: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Filter submissions by blocked_by")] = None,
        filter_duplicate: Annotated[Optional[StrictBool], Field(description="Filter submissions by duplicate")] = None,
        filter_payments: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter submissions by payment information")] = None,
        filter_points: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter submissions by points")] = None,
        filter_program: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by program")] = None,
        filter_researcher: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by researcher")] = None,
        filter_retest: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Filter submissions by retest")] = None,
        filter_search: Annotated[Optional[StrictStr], Field(description="Filter submissions by searching through title, description, and comment text")] = None,
        filter_severity: Annotated[Optional[Annotated[List[Annotated[int, Field(le=5, strict=True, ge=1)]], Field(max_length=4)]], Field(description="Filter submissions by severity")] = None,
        filter_source: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=7)]], Field(description="Filter submissions by source")] = None,
        filter_state: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=8)]], Field(description="Filter submissions by state")] = None,
        filter_submitted: Annotated[Optional[date], Field(description="Filter submissions by submitted timestamp")] = None,
        filter_target: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by target name")] = None,
        filter_target_type: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=8)]], Field(description="Filter submissions by target_type")] = None,
        filter_updated: Annotated[Optional[date], Field(description="Filter submissions by updated timestamp")] = None,
        filter_vrt: Annotated[Optional[StrictStr], Field(description="Filter submissions by `.` separated vrt id")] = None,
        sort: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Tokenized search sort options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListSubmissionsResponse]:
        """Index submissions

        Returns a filtered list of submissions based on tokenized search and sort parameters.

        :param bugcrowd_version: The request header used to test new API versions before updating the pinned account version
        :type bugcrowd_version: str
        :param fields_activity: Limit fields for `activity` resources. If not provided, all fields will be returned
        :type fields_activity: List[str]
        :param fields_claim_ticket: Limit fields for `claim_ticket` resources. If not provided, all fields will be returned
        :type fields_claim_ticket: List[str]
        :param fields_comment: Limit fields for `comment` resources. If not provided, all fields will be returned
        :type fields_comment: List[str]
        :param fields_cvss_vector: Limit fields for `cvss_vector` resources. If not provided, all fields will be returned
        :type fields_cvss_vector: List[str]
        :param fields_external_issue: Limit fields for `external_issue` resources. If not provided, all fields will be returned
        :type fields_external_issue: List[str]
        :param fields_file_attachment: Limit fields for `file_attachment` resources. If not provided, all fields will be returned
        :type fields_file_attachment: List[str]
        :param fields_identity: Limit fields for `identity` resources. If not provided, all fields will be returned
        :type fields_identity: List[str]
        :param fields_monetary_reward: Limit fields for `monetary_reward` resources. If not provided, all fields will be returned
        :type fields_monetary_reward: List[str]
        :param fields_organization: Limit fields for `organization` resources. If not provided, all fields will be returned
        :type fields_organization: List[str]
        :param fields_payment: Limit fields for `payment` resources. If not provided, all fields will be returned
        :type fields_payment: List[str]
        :param fields_program: Limit fields for `program` resources. If not provided, all fields will be returned
        :type fields_program: List[str]
        :param fields_program_brief: Limit fields for `program_brief` resources. If not provided, all fields will be returned
        :type fields_program_brief: List[str]
        :param fields_submission: Limit fields for `submission` resources. If not provided, all fields will be returned
        :type fields_submission: List[str]
        :param fields_target: Limit fields for `target` resources. If not provided, all fields will be returned
        :type fields_target: List[str]
        :param fields_target_group: Limit fields for `target_group` resources. If not provided, all fields will be returned
        :type fields_target_group: List[str]
        :param page_limit: Limit parameter for pagination (default page[limit] = 25)
        :type page_limit: int
        :param page_offset: Offset parameter for pagination (default page[offset] = 0 == first page)
        :type page_offset: int
        :param include: Related associations that will be returned as a flat list of objects.
        :type include: List[str]
        :param filter_assignee: Filter submissions by assignee. Use either an email address or the keywords `me` or `none` 
        :type filter_assignee: List[str]
        :param filter_blocked_by: Filter submissions by blocked_by
        :type filter_blocked_by: List[str]
        :param filter_duplicate: Filter submissions by duplicate
        :type filter_duplicate: bool
        :param filter_payments: Filter submissions by payment information
        :type filter_payments: List[str]
        :param filter_points: Filter submissions by points
        :type filter_points: List[str]
        :param filter_program: Filter submissions by program
        :type filter_program: List[str]
        :param filter_researcher: Filter submissions by researcher
        :type filter_researcher: List[str]
        :param filter_retest: Filter submissions by retest
        :type filter_retest: List[str]
        :param filter_search: Filter submissions by searching through title, description, and comment text
        :type filter_search: str
        :param filter_severity: Filter submissions by severity
        :type filter_severity: List[int]
        :param filter_source: Filter submissions by source
        :type filter_source: List[str]
        :param filter_state: Filter submissions by state
        :type filter_state: List[str]
        :param filter_submitted: Filter submissions by submitted timestamp
        :type filter_submitted: date
        :param filter_target: Filter submissions by target name
        :type filter_target: List[str]
        :param filter_target_type: Filter submissions by target_type
        :type filter_target_type: List[str]
        :param filter_updated: Filter submissions by updated timestamp
        :type filter_updated: date
        :param filter_vrt: Filter submissions by `.` separated vrt id
        :type filter_vrt: str
        :param sort: Tokenized search sort options
        :type sort: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_submissions_serialize(
            bugcrowd_version=bugcrowd_version,
            fields_activity=fields_activity,
            fields_claim_ticket=fields_claim_ticket,
            fields_comment=fields_comment,
            fields_cvss_vector=fields_cvss_vector,
            fields_external_issue=fields_external_issue,
            fields_file_attachment=fields_file_attachment,
            fields_identity=fields_identity,
            fields_monetary_reward=fields_monetary_reward,
            fields_organization=fields_organization,
            fields_payment=fields_payment,
            fields_program=fields_program,
            fields_program_brief=fields_program_brief,
            fields_submission=fields_submission,
            fields_target=fields_target,
            fields_target_group=fields_target_group,
            page_limit=page_limit,
            page_offset=page_offset,
            include=include,
            filter_assignee=filter_assignee,
            filter_blocked_by=filter_blocked_by,
            filter_duplicate=filter_duplicate,
            filter_payments=filter_payments,
            filter_points=filter_points,
            filter_program=filter_program,
            filter_researcher=filter_researcher,
            filter_retest=filter_retest,
            filter_search=filter_search,
            filter_severity=filter_severity,
            filter_source=filter_source,
            filter_state=filter_state,
            filter_submitted=filter_submitted,
            filter_target=filter_target,
            filter_target_type=filter_target_type,
            filter_updated=filter_updated,
            filter_vrt=filter_vrt,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSubmissionsResponse",
            '400': "ErrorContent",
            '404': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_submissions_without_preload_content(
        self,
        bugcrowd_version: Annotated[Optional[StrictStr], Field(description="The request header used to test new API versions before updating the pinned account version")] = None,
        fields_activity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `activity` resources. If not provided, all fields will be returned")] = None,
        fields_claim_ticket: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `claim_ticket` resources. If not provided, all fields will be returned")] = None,
        fields_comment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `comment` resources. If not provided, all fields will be returned")] = None,
        fields_cvss_vector: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Limit fields for `cvss_vector` resources. If not provided, all fields will be returned")] = None,
        fields_external_issue: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `external_issue` resources. If not provided, all fields will be returned")] = None,
        fields_file_attachment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `file_attachment` resources. If not provided, all fields will be returned")] = None,
        fields_identity: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `identity` resources. If not provided, all fields will be returned")] = None,
        fields_monetary_reward: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=14)]], Field(description="Limit fields for `monetary_reward` resources. If not provided, all fields will be returned")] = None,
        fields_organization: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=3)]], Field(description="Limit fields for `organization` resources. If not provided, all fields will be returned")] = None,
        fields_payment: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `payment` resources. If not provided, all fields will be returned")] = None,
        fields_program: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Limit fields for `program` resources. If not provided, all fields will be returned")] = None,
        fields_program_brief: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=9)]], Field(description="Limit fields for `program_brief` resources. If not provided, all fields will be returned")] = None,
        fields_submission: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=35)]], Field(description="Limit fields for `submission` resources. If not provided, all fields will be returned")] = None,
        fields_target: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=4)]], Field(description="Limit fields for `target` resources. If not provided, all fields will be returned")] = None,
        fields_target_group: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Limit fields for `target_group` resources. If not provided, all fields will be returned")] = None,
        page_limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=0)]], Field(description="Limit parameter for pagination (default page[limit] = 25)")] = None,
        page_offset: Annotated[Optional[Annotated[int, Field(le=9900, strict=True, ge=0)]], Field(description="Offset parameter for pagination (default page[offset] = 0 == first page)")] = None,
        include: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=20)]], Field(description="Related associations that will be returned as a flat list of objects.")] = None,
        filter_assignee: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by assignee. Use either an email address or the keywords `me` or `none` ")] = None,
        filter_blocked_by: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=5)]], Field(description="Filter submissions by blocked_by")] = None,
        filter_duplicate: Annotated[Optional[StrictBool], Field(description="Filter submissions by duplicate")] = None,
        filter_payments: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter submissions by payment information")] = None,
        filter_points: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=2)]], Field(description="Filter submissions by points")] = None,
        filter_program: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by program")] = None,
        filter_researcher: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by researcher")] = None,
        filter_retest: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Filter submissions by retest")] = None,
        filter_search: Annotated[Optional[StrictStr], Field(description="Filter submissions by searching through title, description, and comment text")] = None,
        filter_severity: Annotated[Optional[Annotated[List[Annotated[int, Field(le=5, strict=True, ge=1)]], Field(max_length=4)]], Field(description="Filter submissions by severity")] = None,
        filter_source: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=7)]], Field(description="Filter submissions by source")] = None,
        filter_state: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=8)]], Field(description="Filter submissions by state")] = None,
        filter_submitted: Annotated[Optional[date], Field(description="Filter submissions by submitted timestamp")] = None,
        filter_target: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=10)]], Field(description="Filter submissions by target name")] = None,
        filter_target_type: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=8)]], Field(description="Filter submissions by target_type")] = None,
        filter_updated: Annotated[Optional[date], Field(description="Filter submissions by updated timestamp")] = None,
        filter_vrt: Annotated[Optional[StrictStr], Field(description="Filter submissions by `.` separated vrt id")] = None,
        sort: Annotated[Optional[Annotated[List[StrictStr], Field(max_length=6)]], Field(description="Tokenized search sort options")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Index submissions

        Returns a filtered list of submissions based on tokenized search and sort parameters.

        :param bugcrowd_version: The request header used to test new API versions before updating the pinned account version
        :type bugcrowd_version: str
        :param fields_activity: Limit fields for `activity` resources. If not provided, all fields will be returned
        :type fields_activity: List[str]
        :param fields_claim_ticket: Limit fields for `claim_ticket` resources. If not provided, all fields will be returned
        :type fields_claim_ticket: List[str]
        :param fields_comment: Limit fields for `comment` resources. If not provided, all fields will be returned
        :type fields_comment: List[str]
        :param fields_cvss_vector: Limit fields for `cvss_vector` resources. If not provided, all fields will be returned
        :type fields_cvss_vector: List[str]
        :param fields_external_issue: Limit fields for `external_issue` resources. If not provided, all fields will be returned
        :type fields_external_issue: List[str]
        :param fields_file_attachment: Limit fields for `file_attachment` resources. If not provided, all fields will be returned
        :type fields_file_attachment: List[str]
        :param fields_identity: Limit fields for `identity` resources. If not provided, all fields will be returned
        :type fields_identity: List[str]
        :param fields_monetary_reward: Limit fields for `monetary_reward` resources. If not provided, all fields will be returned
        :type fields_monetary_reward: List[str]
        :param fields_organization: Limit fields for `organization` resources. If not provided, all fields will be returned
        :type fields_organization: List[str]
        :param fields_payment: Limit fields for `payment` resources. If not provided, all fields will be returned
        :type fields_payment: List[str]
        :param fields_program: Limit fields for `program` resources. If not provided, all fields will be returned
        :type fields_program: List[str]
        :param fields_program_brief: Limit fields for `program_brief` resources. If not provided, all fields will be returned
        :type fields_program_brief: List[str]
        :param fields_submission: Limit fields for `submission` resources. If not provided, all fields will be returned
        :type fields_submission: List[str]
        :param fields_target: Limit fields for `target` resources. If not provided, all fields will be returned
        :type fields_target: List[str]
        :param fields_target_group: Limit fields for `target_group` resources. If not provided, all fields will be returned
        :type fields_target_group: List[str]
        :param page_limit: Limit parameter for pagination (default page[limit] = 25)
        :type page_limit: int
        :param page_offset: Offset parameter for pagination (default page[offset] = 0 == first page)
        :type page_offset: int
        :param include: Related associations that will be returned as a flat list of objects.
        :type include: List[str]
        :param filter_assignee: Filter submissions by assignee. Use either an email address or the keywords `me` or `none` 
        :type filter_assignee: List[str]
        :param filter_blocked_by: Filter submissions by blocked_by
        :type filter_blocked_by: List[str]
        :param filter_duplicate: Filter submissions by duplicate
        :type filter_duplicate: bool
        :param filter_payments: Filter submissions by payment information
        :type filter_payments: List[str]
        :param filter_points: Filter submissions by points
        :type filter_points: List[str]
        :param filter_program: Filter submissions by program
        :type filter_program: List[str]
        :param filter_researcher: Filter submissions by researcher
        :type filter_researcher: List[str]
        :param filter_retest: Filter submissions by retest
        :type filter_retest: List[str]
        :param filter_search: Filter submissions by searching through title, description, and comment text
        :type filter_search: str
        :param filter_severity: Filter submissions by severity
        :type filter_severity: List[int]
        :param filter_source: Filter submissions by source
        :type filter_source: List[str]
        :param filter_state: Filter submissions by state
        :type filter_state: List[str]
        :param filter_submitted: Filter submissions by submitted timestamp
        :type filter_submitted: date
        :param filter_target: Filter submissions by target name
        :type filter_target: List[str]
        :param filter_target_type: Filter submissions by target_type
        :type filter_target_type: List[str]
        :param filter_updated: Filter submissions by updated timestamp
        :type filter_updated: date
        :param filter_vrt: Filter submissions by `.` separated vrt id
        :type filter_vrt: str
        :param sort: Tokenized search sort options
        :type sort: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_submissions_serialize(
            bugcrowd_version=bugcrowd_version,
            fields_activity=fields_activity,
            fields_claim_ticket=fields_claim_ticket,
            fields_comment=fields_comment,
            fields_cvss_vector=fields_cvss_vector,
            fields_external_issue=fields_external_issue,
            fields_file_attachment=fields_file_attachment,
            fields_identity=fields_identity,
            fields_monetary_reward=fields_monetary_reward,
            fields_organization=fields_organization,
            fields_payment=fields_payment,
            fields_program=fields_program,
            fields_program_brief=fields_program_brief,
            fields_submission=fields_submission,
            fields_target=fields_target,
            fields_target_group=fields_target_group,
            page_limit=page_limit,
            page_offset=page_offset,
            include=include,
            filter_assignee=filter_assignee,
            filter_blocked_by=filter_blocked_by,
            filter_duplicate=filter_duplicate,
            filter_payments=filter_payments,
            filter_points=filter_points,
            filter_program=filter_program,
            filter_researcher=filter_researcher,
            filter_retest=filter_retest,
            filter_search=filter_search,
            filter_severity=filter_severity,
            filter_source=filter_source,
            filter_state=filter_state,
            filter_submitted=filter_submitted,
            filter_target=filter_target,
            filter_target_type=filter_target_type,
            filter_updated=filter_updated,
            filter_vrt=filter_vrt,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSubmissionsResponse",
            '400': "ErrorContent",
            '404': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_submissions_serialize(
        self,
        bugcrowd_version,
        fields_activity,
        fields_claim_ticket,
        fields_comment,
        fields_cvss_vector,
        fields_external_issue,
        fields_file_attachment,
        fields_identity,
        fields_monetary_reward,
        fields_organization,
        fields_payment,
        fields_program,
        fields_program_brief,
        fields_submission,
        fields_target,
        fields_target_group,
        page_limit,
        page_offset,
        include,
        filter_assignee,
        filter_blocked_by,
        filter_duplicate,
        filter_payments,
        filter_points,
        filter_program,
        filter_researcher,
        filter_retest,
        filter_search,
        filter_severity,
        filter_source,
        filter_state,
        filter_submitted,
        filter_target,
        filter_target_type,
        filter_updated,
        filter_vrt,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields[activity]': 'csv',
            'fields[claim_ticket]': 'csv',
            'fields[comment]': 'csv',
            'fields[cvss_vector]': 'csv',
            'fields[external_issue]': 'csv',
            'fields[file_attachment]': 'csv',
            'fields[identity]': 'csv',
            'fields[monetary_reward]': 'csv',
            'fields[organization]': 'csv',
            'fields[payment]': 'csv',
            'fields[program]': 'csv',
            'fields[program_brief]': 'csv',
            'fields[submission]': 'csv',
            'fields[target]': 'csv',
            'fields[target_group]': 'csv',
            'include': 'csv',
            'filter[assignee]': 'csv',
            'filter[blocked_by]': 'csv',
            'filter[payments]': 'csv',
            'filter[points]': 'csv',
            'filter[program]': 'csv',
            'filter[researcher]': 'csv',
            'filter[retest]': 'csv',
            'filter[severity]': 'csv',
            'filter[source]': 'csv',
            'filter[state]': 'csv',
            'filter[target]': 'csv',
            'filter[target_type]': 'csv',
            'sort': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if fields_activity is not None:
            
            _query_params.append(('fields[activity]', fields_activity))
            
        if fields_claim_ticket is not None:
            
            _query_params.append(('fields[claim_ticket]', fields_claim_ticket))
            
        if fields_comment is not None:
            
            _query_params.append(('fields[comment]', fields_comment))
            
        if fields_cvss_vector is not None:
            
            _query_params.append(('fields[cvss_vector]', fields_cvss_vector))
            
        if fields_external_issue is not None:
            
            _query_params.append(('fields[external_issue]', fields_external_issue))
            
        if fields_file_attachment is not None:
            
            _query_params.append(('fields[file_attachment]', fields_file_attachment))
            
        if fields_identity is not None:
            
            _query_params.append(('fields[identity]', fields_identity))
            
        if fields_monetary_reward is not None:
            
            _query_params.append(('fields[monetary_reward]', fields_monetary_reward))
            
        if fields_organization is not None:
            
            _query_params.append(('fields[organization]', fields_organization))
            
        if fields_payment is not None:
            
            _query_params.append(('fields[payment]', fields_payment))
            
        if fields_program is not None:
            
            _query_params.append(('fields[program]', fields_program))
            
        if fields_program_brief is not None:
            
            _query_params.append(('fields[program_brief]', fields_program_brief))
            
        if fields_submission is not None:
            
            _query_params.append(('fields[submission]', fields_submission))
            
        if fields_target is not None:
            
            _query_params.append(('fields[target]', fields_target))
            
        if fields_target_group is not None:
            
            _query_params.append(('fields[target_group]', fields_target_group))
            
        if page_limit is not None:
            
            _query_params.append(('page[limit]', page_limit))
            
        if page_offset is not None:
            
            _query_params.append(('page[offset]', page_offset))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if filter_assignee is not None:
            
            _query_params.append(('filter[assignee]', filter_assignee))
            
        if filter_blocked_by is not None:
            
            _query_params.append(('filter[blocked_by]', filter_blocked_by))
            
        if filter_duplicate is not None:
            
            _query_params.append(('filter[duplicate]', filter_duplicate))
            
        if filter_payments is not None:
            
            _query_params.append(('filter[payments]', filter_payments))
            
        if filter_points is not None:
            
            _query_params.append(('filter[points]', filter_points))
            
        if filter_program is not None:
            
            _query_params.append(('filter[program]', filter_program))
            
        if filter_researcher is not None:
            
            _query_params.append(('filter[researcher]', filter_researcher))
            
        if filter_retest is not None:
            
            _query_params.append(('filter[retest]', filter_retest))
            
        if filter_search is not None:
            
            _query_params.append(('filter[search]', filter_search))
            
        if filter_severity is not None:
            
            _query_params.append(('filter[severity]', filter_severity))
            
        if filter_source is not None:
            
            _query_params.append(('filter[source]', filter_source))
            
        if filter_state is not None:
            
            _query_params.append(('filter[state]', filter_state))
            
        if filter_submitted is not None:
            if isinstance(filter_submitted, date):
                _query_params.append(
                    (
                        'filter[submitted]',
                        filter_submitted.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filter[submitted]', filter_submitted))
            
        if filter_target is not None:
            
            _query_params.append(('filter[target]', filter_target))
            
        if filter_target_type is not None:
            
            _query_params.append(('filter[target_type]', filter_target_type))
            
        if filter_updated is not None:
            if isinstance(filter_updated, date):
                _query_params.append(
                    (
                        'filter[updated]',
                        filter_updated.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('filter[updated]', filter_updated))
            
        if filter_vrt is not None:
            
            _query_params.append(('filter[vrt]', filter_vrt))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        if bugcrowd_version is not None:
            _header_params['Bugcrowd-Version'] = bugcrowd_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.bugcrowd.v4+json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/submissions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_submission(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the resource in uuid format")],
        update_submission_request: Annotated[UpdateSubmissionRequest, Field(description="Update a submission")],
        bugcrowd_version: Annotated[Optional[StrictStr], Field(description="The request header used to test new API versions before updating the pinned account version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateSubmissionResponse:
        """Update submission

        Update a single submission by UUID

        :param id: The ID of the resource in uuid format (required)
        :type id: str
        :param update_submission_request: Update a submission (required)
        :type update_submission_request: UpdateSubmissionRequest
        :param bugcrowd_version: The request header used to test new API versions before updating the pinned account version
        :type bugcrowd_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_submission_serialize(
            id=id,
            update_submission_request=update_submission_request,
            bugcrowd_version=bugcrowd_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateSubmissionResponse",
            '400': "ErrorContent",
            '404': "ErrorContent",
            '409': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_submission_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the resource in uuid format")],
        update_submission_request: Annotated[UpdateSubmissionRequest, Field(description="Update a submission")],
        bugcrowd_version: Annotated[Optional[StrictStr], Field(description="The request header used to test new API versions before updating the pinned account version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateSubmissionResponse]:
        """Update submission

        Update a single submission by UUID

        :param id: The ID of the resource in uuid format (required)
        :type id: str
        :param update_submission_request: Update a submission (required)
        :type update_submission_request: UpdateSubmissionRequest
        :param bugcrowd_version: The request header used to test new API versions before updating the pinned account version
        :type bugcrowd_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_submission_serialize(
            id=id,
            update_submission_request=update_submission_request,
            bugcrowd_version=bugcrowd_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateSubmissionResponse",
            '400': "ErrorContent",
            '404': "ErrorContent",
            '409': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_submission_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="The ID of the resource in uuid format")],
        update_submission_request: Annotated[UpdateSubmissionRequest, Field(description="Update a submission")],
        bugcrowd_version: Annotated[Optional[StrictStr], Field(description="The request header used to test new API versions before updating the pinned account version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update submission

        Update a single submission by UUID

        :param id: The ID of the resource in uuid format (required)
        :type id: str
        :param update_submission_request: Update a submission (required)
        :type update_submission_request: UpdateSubmissionRequest
        :param bugcrowd_version: The request header used to test new API versions before updating the pinned account version
        :type bugcrowd_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_submission_serialize(
            id=id,
            update_submission_request=update_submission_request,
            bugcrowd_version=bugcrowd_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateSubmissionResponse",
            '400': "ErrorContent",
            '404': "ErrorContent",
            '409': "ErrorContent",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_submission_serialize(
        self,
        id,
        update_submission_request,
        bugcrowd_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if bugcrowd_version is not None:
            _header_params['Bugcrowd-Version'] = bugcrowd_version
        # process the form parameters
        # process the body parameter
        if update_submission_request is not None:
            _body_params = update_submission_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.bugcrowd.v4+json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/vnd.bugcrowd.v4+json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/submissions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


