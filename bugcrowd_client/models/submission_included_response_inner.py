# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from bugcrowd_client.models.activity import Activity
from bugcrowd_client.models.claim_ticket import ClaimTicket
from bugcrowd_client.models.comment import Comment
from bugcrowd_client.models.cvss_vector import CvssVector
from bugcrowd_client.models.external_issue import ExternalIssue
from bugcrowd_client.models.file_attachment import FileAttachment
from bugcrowd_client.models.identity import Identity
from bugcrowd_client.models.monetary_reward import MonetaryReward
from bugcrowd_client.models.organization import Organization
from bugcrowd_client.models.payment import Payment
from bugcrowd_client.models.program import Program
from bugcrowd_client.models.program_brief import ProgramBrief
from bugcrowd_client.models.submission import Submission
from bugcrowd_client.models.target import Target
from bugcrowd_client.models.target_group import TargetGroup
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

SUBMISSIONINCLUDEDRESPONSEINNER_ANY_OF_SCHEMAS = ["Activity", "ClaimTicket", "Comment", "CvssVector", "ExternalIssue", "FileAttachment", "Identity", "MonetaryReward", "Organization", "Payment", "Program", "ProgramBrief", "Submission", "Target", "TargetGroup"]

class SubmissionIncludedResponseInner(BaseModel):
    """
    SubmissionIncludedResponseInner
    """

    # data type: Activity
    anyof_schema_1_validator: Optional[Activity] = None
    # data type: Identity
    anyof_schema_2_validator: Optional[Identity] = None
    # data type: ClaimTicket
    anyof_schema_3_validator: Optional[ClaimTicket] = None
    # data type: Comment
    anyof_schema_4_validator: Optional[Comment] = None
    # data type: FileAttachment
    anyof_schema_5_validator: Optional[FileAttachment] = None
    # data type: CvssVector
    anyof_schema_6_validator: Optional[CvssVector] = None
    # data type: Submission
    anyof_schema_7_validator: Optional[Submission] = None
    # data type: ExternalIssue
    anyof_schema_8_validator: Optional[ExternalIssue] = None
    # data type: MonetaryReward
    anyof_schema_9_validator: Optional[MonetaryReward] = None
    # data type: Payment
    anyof_schema_10_validator: Optional[Payment] = None
    # data type: Program
    anyof_schema_11_validator: Optional[Program] = None
    # data type: ProgramBrief
    anyof_schema_12_validator: Optional[ProgramBrief] = None
    # data type: TargetGroup
    anyof_schema_13_validator: Optional[TargetGroup] = None
    # data type: Organization
    anyof_schema_14_validator: Optional[Organization] = None
    # data type: Target
    anyof_schema_15_validator: Optional[Target] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[Activity, ClaimTicket, Comment, CvssVector, ExternalIssue, FileAttachment, Identity, MonetaryReward, Organization, Payment, Program, ProgramBrief, Submission, Target, TargetGroup]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = Literal[SUBMISSIONINCLUDEDRESPONSEINNER_ANY_OF_SCHEMAS]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = SubmissionIncludedResponseInner.model_construct()
        error_messages = []
        # validate data type: Activity
        if not isinstance(v, Activity):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Activity`")
        else:
            return v

        # validate data type: Identity
        if not isinstance(v, Identity):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Identity`")
        else:
            return v

        # validate data type: ClaimTicket
        if not isinstance(v, ClaimTicket):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ClaimTicket`")
        else:
            return v

        # validate data type: Comment
        if not isinstance(v, Comment):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Comment`")
        else:
            return v

        # validate data type: FileAttachment
        if not isinstance(v, FileAttachment):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FileAttachment`")
        else:
            return v

        # validate data type: CvssVector
        if not isinstance(v, CvssVector):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CvssVector`")
        else:
            return v

        # validate data type: Submission
        if not isinstance(v, Submission):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Submission`")
        else:
            return v

        # validate data type: ExternalIssue
        if not isinstance(v, ExternalIssue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExternalIssue`")
        else:
            return v

        # validate data type: MonetaryReward
        if not isinstance(v, MonetaryReward):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MonetaryReward`")
        else:
            return v

        # validate data type: Payment
        if not isinstance(v, Payment):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Payment`")
        else:
            return v

        # validate data type: Program
        if not isinstance(v, Program):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Program`")
        else:
            return v

        # validate data type: ProgramBrief
        if not isinstance(v, ProgramBrief):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProgramBrief`")
        else:
            return v

        # validate data type: TargetGroup
        if not isinstance(v, TargetGroup):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TargetGroup`")
        else:
            return v

        # validate data type: Organization
        if not isinstance(v, Organization):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Organization`")
        else:
            return v

        # validate data type: Target
        if not isinstance(v, Target):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Target`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in SubmissionIncludedResponseInner with anyOf schemas: Activity, ClaimTicket, Comment, CvssVector, ExternalIssue, FileAttachment, Identity, MonetaryReward, Organization, Payment, Program, ProgramBrief, Submission, Target, TargetGroup. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[Activity] = None
        try:
            instance.actual_instance = Activity.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[Identity] = None
        try:
            instance.actual_instance = Identity.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[ClaimTicket] = None
        try:
            instance.actual_instance = ClaimTicket.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[Comment] = None
        try:
            instance.actual_instance = Comment.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[FileAttachment] = None
        try:
            instance.actual_instance = FileAttachment.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[CvssVector] = None
        try:
            instance.actual_instance = CvssVector.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[Submission] = None
        try:
            instance.actual_instance = Submission.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[ExternalIssue] = None
        try:
            instance.actual_instance = ExternalIssue.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[MonetaryReward] = None
        try:
            instance.actual_instance = MonetaryReward.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[Payment] = None
        try:
            instance.actual_instance = Payment.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[Program] = None
        try:
            instance.actual_instance = Program.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[ProgramBrief] = None
        try:
            instance.actual_instance = ProgramBrief.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[TargetGroup] = None
        try:
            instance.actual_instance = TargetGroup.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[Organization] = None
        try:
            instance.actual_instance = Organization.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[Target] = None
        try:
            instance.actual_instance = Target.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SubmissionIncludedResponseInner with anyOf schemas: Activity, ClaimTicket, Comment, CvssVector, ExternalIssue, FileAttachment, Identity, MonetaryReward, Organization, Payment, Program, ProgramBrief, Submission, Target, TargetGroup. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


