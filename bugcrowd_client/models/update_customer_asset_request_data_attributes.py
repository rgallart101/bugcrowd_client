# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from bugcrowd_client.models.update_customer_asset_request_data_attributes_tags import UpdateCustomerAssetRequestDataAttributesTags
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateCustomerAssetRequestDataAttributes(BaseModel):
    """
    UpdateCustomerAssetRequestDataAttributes
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name for your asset.")
    type: Optional[StrictStr] = Field(default=None, description="To hold type of the customer asset to be updated with. It should contain only one of the enum values specified below. ")
    description: Optional[StrictStr] = None
    host_name: Optional[StrictStr] = None
    port_list: Optional[Annotated[List[StrictInt], Field(max_length=100)]] = Field(default=None, description="A list of port numbers for the asset between the range of 1 to 65535. Note - Update will replace any previously added ports. ")
    ip_address: Optional[Annotated[List[StrictStr], Field(max_length=100)]] = Field(default=None, description="A list of IPv4 / IPv6 / CIDR range of IP Address for the asset. Note - Update will replace any previously added IP Address. ")
    attributes: Optional[Annotated[List[object], Field(max_length=100)]] = Field(default=None, description="To hold an array of asset_attributes which are basically key-value pairs of all possible attributes for the asset. The `key` to hold the name for the asset_attribute and the `value` to holds its value.  Commonly expected attributes are `external_id, external_link, record_type, autonomous_system_number etc`.  If the key is `record_type`, then its value should be in `A, AAAA, PTR, CNAME, MX, TXT, NS, SOA and SRV`.  If the key is `autonomous_system_number`, then it should be a unique 16 bit numbers between 1 and 65534 or 32 bit numbers between 131072 and 4294967294. The number should be prefixed with AS. Example - AS(number).  External ID is often a Configuration Item ID from a CMDB. Sometimes this is an ID from an external discovery scanner tool.  External link is a hyperlink or an identifier.  Customers can also specify their own attributes other than the given above list.Update will replace the entire list of previously added asset_attributes with list specified here. ")
    approved: Optional[StrictBool] = Field(default=None, description="Specifies if the asset is user approved and ready to be used.")
    tags: Optional[UpdateCustomerAssetRequestDataAttributesTags] = None
    __properties: ClassVar[List[str]] = ["name", "type", "description", "host_name", "port_list", "ip_address", "attributes", "approved", "tags"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('domain', 'url', 'host', 'android_play_store', 'android_apk', 'hardware', 'source_code', 'ios_app_store', 'ios_ipa', 'ios_test_flight', 'executable', 'cidr', 'fqdn', 'ip_address', 'api', 'other_asset_type'):
            raise ValueError("must be one of enum values ('domain', 'url', 'host', 'android_play_store', 'android_apk', 'hardware', 'source_code', 'ios_app_store', 'ios_ipa', 'ios_test_flight', 'executable', 'cidr', 'fqdn', 'ip_address', 'api', 'other_asset_type')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateCustomerAssetRequestDataAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateCustomerAssetRequestDataAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "host_name": obj.get("host_name"),
            "port_list": obj.get("port_list"),
            "ip_address": obj.get("ip_address"),
            "attributes": obj.get("attributes"),
            "approved": obj.get("approved"),
            "tags": UpdateCustomerAssetRequestDataAttributesTags.from_dict(obj.get("tags")) if obj.get("tags") is not None else None
        })
        return _obj


