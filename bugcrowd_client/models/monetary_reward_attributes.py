# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from bugcrowd_client.models.monetary_reward_reason_enum import MonetaryRewardReasonEnum
from bugcrowd_client.models.nullable_monetary_reward_cancellation_reason_enum import NullableMonetaryRewardCancellationReasonEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MonetaryRewardAttributes(BaseModel):
    """
    MonetaryRewardAttributes
    """ # noqa: E501
    amount_cents: Optional[StrictInt] = Field(default=None, description="Amount of the monetary reward specified in cents")
    cancellation_comment: Optional[StrictStr] = Field(default=None, description="Optional comment provided when a monetary reward has been canceled")
    cancellation_reason: Optional[NullableMonetaryRewardCancellationReasonEnum] = None
    cancelled_at: Optional[StrictStr] = Field(default=None, description="Timestamp indicating when a monetary reward was cancelled")
    cancelled: Optional[StrictBool] = Field(default=None, description="Boolean indicating whether a monetary reward has been cancelled")
    comment: Optional[StrictStr] = Field(default=None, description="Comment regarding monetary reward. This is mostly optional, but required if a reward is outside the range associated with the assigned priority")
    created_at: Optional[StrictStr] = Field(default=None, description="Time at which the object was created")
    reason: Optional[MonetaryRewardReasonEnum] = None
    rewarded_at: Optional[StrictStr] = Field(default=None, description="Time at which the object was rewarded")
    formatted_amount: Optional[StrictStr] = Field(default=None, description="Monetary reward amount formatted is UDS with dollars and cents. Example: $1,234.56")
    __properties: ClassVar[List[str]] = ["amount_cents", "cancellation_comment", "cancellation_reason", "cancelled_at", "cancelled", "comment", "created_at", "reason", "rewarded_at", "formatted_amount"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MonetaryRewardAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if cancellation_comment (nullable) is None
        # and model_fields_set contains the field
        if self.cancellation_comment is None and "cancellation_comment" in self.model_fields_set:
            _dict['cancellation_comment'] = None

        # set to None if cancellation_reason (nullable) is None
        # and model_fields_set contains the field
        if self.cancellation_reason is None and "cancellation_reason" in self.model_fields_set:
            _dict['cancellation_reason'] = None

        # set to None if cancelled_at (nullable) is None
        # and model_fields_set contains the field
        if self.cancelled_at is None and "cancelled_at" in self.model_fields_set:
            _dict['cancelled_at'] = None

        # set to None if comment (nullable) is None
        # and model_fields_set contains the field
        if self.comment is None and "comment" in self.model_fields_set:
            _dict['comment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MonetaryRewardAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount_cents": obj.get("amount_cents"),
            "cancellation_comment": obj.get("cancellation_comment"),
            "cancellation_reason": obj.get("cancellation_reason"),
            "cancelled_at": obj.get("cancelled_at"),
            "cancelled": obj.get("cancelled"),
            "comment": obj.get("comment"),
            "created_at": obj.get("created_at"),
            "reason": obj.get("reason"),
            "rewarded_at": obj.get("rewarded_at"),
            "formatted_amount": obj.get("formatted_amount")
        })
        return _obj


