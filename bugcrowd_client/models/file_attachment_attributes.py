# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FileAttachmentAttributes(BaseModel):
    """
    FileAttachmentAttributes
    """ # noqa: E501
    file_name: Optional[StrictStr] = Field(default=None, description="The name of the file")
    file_size: Optional[StrictInt] = Field(default=None, description="Size of the file in bytes")
    file_type: Optional[StrictStr] = Field(default=None, description="Filetype. Some examples include 'image/png' and 'application/zip'")
    download_url: Optional[StrictStr] = Field(default=None, description="An authenticated endpoint that looks like `files.bugcrowd.com/:file_attachment_id`  To use this URL you must include the API 'Authorization' header and it will redirect to a signed s3 URL with a 10 second expiry.  This way you can store the `download_url` and it will not expire, but the s3 link is kept secure.  WARNING: DO NOT USE cURL -L to follow the s3 redirect CVE: https://curl.se/docs/CVE-2018-1000007.html  Versions below 7.58.0 automatically forward the authorization headers  In later versions we will introduce OAuth which will somewhat mitigate the risk involved with the authorization header as it will expire. ")
    s3_signed_url: Optional[StrictStr] = Field(default=None, description="URL to the file attachment download.  This link expires in 1 minute and encodes `&` as `\\u0026`.  The `\\u0026` must be replaced with `&` for the link to work.  [DEPRECATED] - This attribute will be removed in a future version, use `download_url` instead. ")
    __properties: ClassVar[List[str]] = ["file_name", "file_size", "file_type", "download_url", "s3_signed_url"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FileAttachmentAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FileAttachmentAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "file_name": obj.get("file_name"),
            "file_size": obj.get("file_size"),
            "file_type": obj.get("file_type"),
            "download_url": obj.get("download_url"),
            "s3_signed_url": obj.get("s3_signed_url")
        })
        return _obj


