# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from bugcrowd_client.models.customer_asset_attributes_attributes_inner import CustomerAssetAttributesAttributesInner
from bugcrowd_client.models.customer_asset_attributes_tags import CustomerAssetAttributesTags
from bugcrowd_client.models.customer_asset_source_enum import CustomerAssetSourceEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomerAssetAttributes(BaseModel):
    """
    CustomerAssetAttributes
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the asset")
    type: Optional[StrictStr] = Field(default=None, description="Basic categorization of the asset. The values might include `host, domain, url, android_play_store, android_apk, hardware, source_code, ios_app_store, ios_ipa, ios_test_flight, executable, cidr, fqdn, ip, api and other_asset_type` ")
    description: Optional[StrictStr] = Field(default=None, description="A brief description about the asset.")
    host_name: Optional[StrictStr] = Field(default=None, description="Host name if any for the asset.")
    port_list: Optional[List[StrictInt]] = Field(default=None, description="A list of port numbers for the asset between the range of 1 to 65535.")
    ip_address: Optional[List[StrictStr]] = Field(default=None, description="A list of IPv4 / IPv6 / CIDR range of IP Address for the asset.")
    attributes: Optional[Annotated[List[CustomerAssetAttributesAttributesInner], Field(max_length=100)]] = Field(default=None, description="A list of key value pairs describing the attributes of the asset. One can add up to 100 attributes for each asset.  Commonly expected attributes are `external_id, external_link, record_type, autonomous_system_number etc`.  If the key is `record_type`, then its value should be in `A, AAAA, PTR, CNAME, MX, TXT, NS, SOA and SRV`.  If the key is `autonomous_system_number`, then it should be a unique 16 bit numbers between 1 and 65534 or 32 bit numbers between 131072 and 4294967294. The number should be prefixed with AS. Example - AS(number)  External ID is often a Configuration Item ID from a CMDB. Sometimes this is an ID from an external discovery scanner tool.  External link is a hyperlink or an identifier.  Customers can also specify their own attributes other than the given above list. ")
    approved: Optional[StrictBool] = Field(default=None, description="Indicates if the asset is approved and ready to be used.")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp indicating when the asset was added.")
    source: Optional[CustomerAssetSourceEnum] = None
    tags: Optional[CustomerAssetAttributesTags] = None
    last_modified_at: Optional[datetime] = Field(default=None, description="Timestamp indicating when the asset was last modified.")
    __properties: ClassVar[List[str]] = ["name", "type", "description", "host_name", "port_list", "ip_address", "attributes", "approved", "created_at", "source", "tags", "last_modified_at"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('domain', 'url', 'host', 'android_play_store', 'android_apk', 'hardware', 'source_code', 'ios_app_store', 'ios_ipa', 'ios_test_flight', 'executable', 'cidr', 'fqdn', 'ip_address', 'api', 'other_asset_type'):
            raise ValueError("must be one of enum values ('domain', 'url', 'host', 'android_play_store', 'android_apk', 'hardware', 'source_code', 'ios_app_store', 'ios_ipa', 'ios_test_flight', 'executable', 'cidr', 'fqdn', 'ip_address', 'api', 'other_asset_type')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomerAssetAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item in self.attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if host_name (nullable) is None
        # and model_fields_set contains the field
        if self.host_name is None and "host_name" in self.model_fields_set:
            _dict['host_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomerAssetAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "host_name": obj.get("host_name"),
            "port_list": obj.get("port_list"),
            "ip_address": obj.get("ip_address"),
            "attributes": [CustomerAssetAttributesAttributesInner.from_dict(_item) for _item in obj.get("attributes")] if obj.get("attributes") is not None else None,
            "approved": obj.get("approved"),
            "created_at": obj.get("created_at"),
            "source": obj.get("source"),
            "tags": CustomerAssetAttributesTags.from_dict(obj.get("tags")) if obj.get("tags") is not None else None,
            "last_modified_at": obj.get("last_modified_at")
        })
        return _obj


