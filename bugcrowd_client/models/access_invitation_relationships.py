# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from bugcrowd_client.models.many_relationship import ManyRelationship
from bugcrowd_client.models.single_relationship import SingleRelationship
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AccessInvitationRelationships(BaseModel):
    """
    AccessInvitationRelationships
    """ # noqa: E501
    granting_identity: Optional[SingleRelationship] = None
    organization: Optional[SingleRelationship] = None
    resource_roles: Optional[ManyRelationship] = None
    __properties: ClassVar[List[str]] = ["granting_identity", "organization", "resource_roles"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AccessInvitationRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of granting_identity
        if self.granting_identity:
            _dict['granting_identity'] = self.granting_identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_roles
        if self.resource_roles:
            _dict['resource_roles'] = self.resource_roles.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AccessInvitationRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "granting_identity": SingleRelationship.from_dict(obj.get("granting_identity")) if obj.get("granting_identity") is not None else None,
            "organization": SingleRelationship.from_dict(obj.get("organization")) if obj.get("organization") is not None else None,
            "resource_roles": ManyRelationship.from_dict(obj.get("resource_roles")) if obj.get("resource_roles") is not None else None
        })
        return _obj


