# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
from bugcrowd_client.models.substate_enum import SubstateEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateSubmissionRequestDataAttributes(BaseModel):
    """
    UpdateSubmissionRequestDataAttributes
    """ # noqa: E501
    bug_url: Optional[StrictStr] = None
    custom_fields: Optional[Dict[str, StrictStr]] = None
    http_request: Optional[StrictStr] = None
    remediation_advice: Optional[StrictStr] = None
    severity: Optional[Annotated[int, Field(le=5, strict=True, ge=1)]] = None
    state: Optional[SubstateEnum] = None
    title: Optional[StrictStr] = None
    vrt_id: Optional[Annotated[str, Field(strict=True)]] = None
    vulnerability_references: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["bug_url", "custom_fields", "http_request", "remediation_advice", "severity", "state", "title", "vrt_id", "vulnerability_references"]

    @field_validator('vrt_id')
    def vrt_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z][a-z_\.0-9]*[a-z0-9]$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z_\.0-9]*[a-z0-9]$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateSubmissionRequestDataAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if bug_url (nullable) is None
        # and model_fields_set contains the field
        if self.bug_url is None and "bug_url" in self.model_fields_set:
            _dict['bug_url'] = None

        # set to None if http_request (nullable) is None
        # and model_fields_set contains the field
        if self.http_request is None and "http_request" in self.model_fields_set:
            _dict['http_request'] = None

        # set to None if remediation_advice (nullable) is None
        # and model_fields_set contains the field
        if self.remediation_advice is None and "remediation_advice" in self.model_fields_set:
            _dict['remediation_advice'] = None

        # set to None if severity (nullable) is None
        # and model_fields_set contains the field
        if self.severity is None and "severity" in self.model_fields_set:
            _dict['severity'] = None

        # set to None if vrt_id (nullable) is None
        # and model_fields_set contains the field
        if self.vrt_id is None and "vrt_id" in self.model_fields_set:
            _dict['vrt_id'] = None

        # set to None if vulnerability_references (nullable) is None
        # and model_fields_set contains the field
        if self.vulnerability_references is None and "vulnerability_references" in self.model_fields_set:
            _dict['vulnerability_references'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateSubmissionRequestDataAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bug_url": obj.get("bug_url"),
            "custom_fields": obj.get("custom_fields"),
            "http_request": obj.get("http_request"),
            "remediation_advice": obj.get("remediation_advice"),
            "severity": obj.get("severity"),
            "state": obj.get("state"),
            "title": obj.get("title"),
            "vrt_id": obj.get("vrt_id"),
            "vulnerability_references": obj.get("vulnerability_references")
        })
        return _obj


