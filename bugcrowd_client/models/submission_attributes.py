# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from bugcrowd_client.models.source_enum import SourceEnum
from bugcrowd_client.models.substate_enum import SubstateEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SubmissionAttributes(BaseModel):
    """
    SubmissionAttributes
    """ # noqa: E501
    bug_url: Optional[StrictStr] = Field(default=None, description="URL / Location of vulnerability (optional)  _This field is only available with direct access to the submission's program_ ")
    custom_fields: Optional[Dict[str, StrictStr]] = Field(default=None, description="Internal metadata associated with submissions. Can be configured in the UI  _This field is only available with direct access to the submission's program_ ")
    description: Optional[StrictStr] = Field(default=None, description="Describes the vulnerability, the steps to reproduce or proof-of-concept, and its impact  _This field is only available with direct access to the submission's program_ ")
    duplicate: Optional[StrictBool] = Field(default=None, description="Indicates that this submission is a duplicate of another submission")
    extra_info: Optional[StrictStr] = Field(default=None, description="Additional information (optional)  _This field is only available with direct access to the submission's program_ ")
    http_request: Optional[StrictStr] = Field(default=None, description="Trace dump / HTTP request (optional)  _This field is only available with direct access to the submission's program_ ")
    last_transitioned_to_informational_at: Optional[datetime] = None
    last_transitioned_to_not_applicable_at: Optional[datetime] = None
    last_transitioned_to_not_reproducible_at: Optional[datetime] = None
    last_transitioned_to_out_of_scope_at: Optional[datetime] = None
    last_transitioned_to_resolved_at: Optional[datetime] = None
    last_transitioned_to_triaged_at: Optional[datetime] = None
    last_transitioned_to_unresolved_at: Optional[datetime] = None
    severity: Optional[Annotated[int, Field(le=5, strict=True, ge=1)]] = None
    remediation_advice: Optional[StrictStr] = Field(default=None, description="Supplied by Bugcrowd's VRT, if enabled remediation advice can give hints to help address vulnerabilities associated with specific submissions  _This field is only available with direct access to the submission's program_ ")
    submitted_at: Optional[datetime] = Field(default=None, description="Timestamp indicating when the submission was submitted")
    source: Optional[SourceEnum] = None
    state: Optional[SubstateEnum] = None
    title: Optional[StrictStr] = Field(default=None, description="The title of the submission.  _This field is only available with direct access to the submission's program. Without direct access the title will read as 'Original submission in another program'._ ")
    vrt_id: Optional[StrictStr] = None
    vrt_version: Optional[StrictStr] = None
    vulnerability_references: Optional[StrictStr] = Field(default=None, description="External links to references about the vrt_id related to the submission. Can be edited to custom references not defined in the VRT.  _This field is only available with direct access to the submission's program_ ")
    __properties: ClassVar[List[str]] = ["bug_url", "custom_fields", "description", "duplicate", "extra_info", "http_request", "last_transitioned_to_informational_at", "last_transitioned_to_not_applicable_at", "last_transitioned_to_not_reproducible_at", "last_transitioned_to_out_of_scope_at", "last_transitioned_to_resolved_at", "last_transitioned_to_triaged_at", "last_transitioned_to_unresolved_at", "severity", "remediation_advice", "submitted_at", "source", "state", "title", "vrt_id", "vrt_version", "vulnerability_references"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SubmissionAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if bug_url (nullable) is None
        # and model_fields_set contains the field
        if self.bug_url is None and "bug_url" in self.model_fields_set:
            _dict['bug_url'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if extra_info (nullable) is None
        # and model_fields_set contains the field
        if self.extra_info is None and "extra_info" in self.model_fields_set:
            _dict['extra_info'] = None

        # set to None if http_request (nullable) is None
        # and model_fields_set contains the field
        if self.http_request is None and "http_request" in self.model_fields_set:
            _dict['http_request'] = None

        # set to None if last_transitioned_to_informational_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_transitioned_to_informational_at is None and "last_transitioned_to_informational_at" in self.model_fields_set:
            _dict['last_transitioned_to_informational_at'] = None

        # set to None if last_transitioned_to_not_applicable_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_transitioned_to_not_applicable_at is None and "last_transitioned_to_not_applicable_at" in self.model_fields_set:
            _dict['last_transitioned_to_not_applicable_at'] = None

        # set to None if last_transitioned_to_not_reproducible_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_transitioned_to_not_reproducible_at is None and "last_transitioned_to_not_reproducible_at" in self.model_fields_set:
            _dict['last_transitioned_to_not_reproducible_at'] = None

        # set to None if last_transitioned_to_out_of_scope_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_transitioned_to_out_of_scope_at is None and "last_transitioned_to_out_of_scope_at" in self.model_fields_set:
            _dict['last_transitioned_to_out_of_scope_at'] = None

        # set to None if last_transitioned_to_resolved_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_transitioned_to_resolved_at is None and "last_transitioned_to_resolved_at" in self.model_fields_set:
            _dict['last_transitioned_to_resolved_at'] = None

        # set to None if last_transitioned_to_triaged_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_transitioned_to_triaged_at is None and "last_transitioned_to_triaged_at" in self.model_fields_set:
            _dict['last_transitioned_to_triaged_at'] = None

        # set to None if last_transitioned_to_unresolved_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_transitioned_to_unresolved_at is None and "last_transitioned_to_unresolved_at" in self.model_fields_set:
            _dict['last_transitioned_to_unresolved_at'] = None

        # set to None if severity (nullable) is None
        # and model_fields_set contains the field
        if self.severity is None and "severity" in self.model_fields_set:
            _dict['severity'] = None

        # set to None if remediation_advice (nullable) is None
        # and model_fields_set contains the field
        if self.remediation_advice is None and "remediation_advice" in self.model_fields_set:
            _dict['remediation_advice'] = None

        # set to None if vulnerability_references (nullable) is None
        # and model_fields_set contains the field
        if self.vulnerability_references is None and "vulnerability_references" in self.model_fields_set:
            _dict['vulnerability_references'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SubmissionAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bug_url": obj.get("bug_url"),
            "custom_fields": obj.get("custom_fields"),
            "description": obj.get("description"),
            "duplicate": obj.get("duplicate"),
            "extra_info": obj.get("extra_info"),
            "http_request": obj.get("http_request"),
            "last_transitioned_to_informational_at": obj.get("last_transitioned_to_informational_at"),
            "last_transitioned_to_not_applicable_at": obj.get("last_transitioned_to_not_applicable_at"),
            "last_transitioned_to_not_reproducible_at": obj.get("last_transitioned_to_not_reproducible_at"),
            "last_transitioned_to_out_of_scope_at": obj.get("last_transitioned_to_out_of_scope_at"),
            "last_transitioned_to_resolved_at": obj.get("last_transitioned_to_resolved_at"),
            "last_transitioned_to_triaged_at": obj.get("last_transitioned_to_triaged_at"),
            "last_transitioned_to_unresolved_at": obj.get("last_transitioned_to_unresolved_at"),
            "severity": obj.get("severity"),
            "remediation_advice": obj.get("remediation_advice"),
            "submitted_at": obj.get("submitted_at"),
            "source": obj.get("source"),
            "state": obj.get("state"),
            "title": obj.get("title"),
            "vrt_id": obj.get("vrt_id"),
            "vrt_version": obj.get("vrt_version"),
            "vulnerability_references": obj.get("vulnerability_references")
        })
        return _obj


