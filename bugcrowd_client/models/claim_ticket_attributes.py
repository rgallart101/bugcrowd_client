# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from bugcrowd_client.models.claim_ticket_status_enum import ClaimTicketStatusEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClaimTicketAttributes(BaseModel):
    """
    ClaimTicketAttributes
    """ # noqa: E501
    claim_url: Optional[StrictStr] = Field(default=None, description="URL where the claim ticket can be accessed. This value is based on the token and is only available in the response when a claim token is created.")
    token: Optional[StrictStr] = Field(default=None, description="Unique token for the claim ticket. This value is not stored and is only available in the response when a claim token is created.")
    claimed_at: Optional[StrictStr] = Field(default=None, description="Timestamp indicating that the claim ticket has been claimed and when it was claimed")
    expires_at: Optional[StrictStr] = Field(default=None, description="Timestamp indicating when the claim ticket will expire")
    status: Optional[ClaimTicketStatusEnum] = None
    __properties: ClassVar[List[str]] = ["claim_url", "token", "claimed_at", "expires_at", "status"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClaimTicketAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if token (nullable) is None
        # and model_fields_set contains the field
        if self.token is None and "token" in self.model_fields_set:
            _dict['token'] = None

        # set to None if claimed_at (nullable) is None
        # and model_fields_set contains the field
        if self.claimed_at is None and "claimed_at" in self.model_fields_set:
            _dict['claimed_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClaimTicketAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "claim_url": obj.get("claim_url"),
            "token": obj.get("token"),
            "claimed_at": obj.get("claimed_at"),
            "expires_at": obj.get("expires_at"),
            "status": obj.get("status")
        })
        return _obj


