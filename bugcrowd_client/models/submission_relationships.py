# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from bugcrowd_client.models.many_relationship import ManyRelationship
from bugcrowd_client.models.single_relationship import SingleRelationship
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SubmissionRelationships(BaseModel):
    """
    All relationships to the submission.  _The following relationships are only available with direct access to the submission's program:_  - activities - assignee - comments - file_attachments - monetary_rewards 
    """ # noqa: E501
    activities: Optional[ManyRelationship] = None
    assignee: Optional[SingleRelationship] = None
    program: Optional[SingleRelationship] = None
    claim_ticket: Optional[SingleRelationship] = None
    comments: Optional[ManyRelationship] = None
    cvss_vector: Optional[SingleRelationship] = None
    duplicates: Optional[ManyRelationship] = None
    duplicate_of: Optional[SingleRelationship] = None
    external_issues: Optional[ManyRelationship] = None
    file_attachments: Optional[ManyRelationship] = None
    monetary_rewards: Optional[ManyRelationship] = None
    target: Optional[SingleRelationship] = None
    researcher: Optional[SingleRelationship] = None
    __properties: ClassVar[List[str]] = ["activities", "assignee", "program", "claim_ticket", "comments", "cvss_vector", "duplicates", "duplicate_of", "external_issues", "file_attachments", "monetary_rewards", "target", "researcher"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SubmissionRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of activities
        if self.activities:
            _dict['activities'] = self.activities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assignee
        if self.assignee:
            _dict['assignee'] = self.assignee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of program
        if self.program:
            _dict['program'] = self.program.to_dict()
        # override the default output from pydantic by calling `to_dict()` of claim_ticket
        if self.claim_ticket:
            _dict['claim_ticket'] = self.claim_ticket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comments
        if self.comments:
            _dict['comments'] = self.comments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cvss_vector
        if self.cvss_vector:
            _dict['cvss_vector'] = self.cvss_vector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duplicates
        if self.duplicates:
            _dict['duplicates'] = self.duplicates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duplicate_of
        if self.duplicate_of:
            _dict['duplicate_of'] = self.duplicate_of.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_issues
        if self.external_issues:
            _dict['external_issues'] = self.external_issues.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_attachments
        if self.file_attachments:
            _dict['file_attachments'] = self.file_attachments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monetary_rewards
        if self.monetary_rewards:
            _dict['monetary_rewards'] = self.monetary_rewards.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of researcher
        if self.researcher:
            _dict['researcher'] = self.researcher.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SubmissionRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activities": ManyRelationship.from_dict(obj.get("activities")) if obj.get("activities") is not None else None,
            "assignee": SingleRelationship.from_dict(obj.get("assignee")) if obj.get("assignee") is not None else None,
            "program": SingleRelationship.from_dict(obj.get("program")) if obj.get("program") is not None else None,
            "claim_ticket": SingleRelationship.from_dict(obj.get("claim_ticket")) if obj.get("claim_ticket") is not None else None,
            "comments": ManyRelationship.from_dict(obj.get("comments")) if obj.get("comments") is not None else None,
            "cvss_vector": SingleRelationship.from_dict(obj.get("cvss_vector")) if obj.get("cvss_vector") is not None else None,
            "duplicates": ManyRelationship.from_dict(obj.get("duplicates")) if obj.get("duplicates") is not None else None,
            "duplicate_of": SingleRelationship.from_dict(obj.get("duplicate_of")) if obj.get("duplicate_of") is not None else None,
            "external_issues": ManyRelationship.from_dict(obj.get("external_issues")) if obj.get("external_issues") is not None else None,
            "file_attachments": ManyRelationship.from_dict(obj.get("file_attachments")) if obj.get("file_attachments") is not None else None,
            "monetary_rewards": ManyRelationship.from_dict(obj.get("monetary_rewards")) if obj.get("monetary_rewards") is not None else None,
            "target": SingleRelationship.from_dict(obj.get("target")) if obj.get("target") is not None else None,
            "researcher": SingleRelationship.from_dict(obj.get("researcher")) if obj.get("researcher") is not None else None
        })
        return _obj


