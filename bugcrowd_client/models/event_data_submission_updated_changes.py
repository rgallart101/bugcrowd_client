# coding: utf-8

"""
    Bugcrowd REST API

    This is Bugcrowd's primary REST API and follows the [JSON API specification](https://jsonapi.org/format/).  For more information on how to get started check out the [usage documentation](https://docs.bugcrowd.com/api/usage/) 

    The version of the OpenAPI document: 2024-01-11
    Contact: support@bugcrowd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from bugcrowd_client.models.event_data_submission_updated_changes_custom_fields_value import EventDataSubmissionUpdatedChangesCustomFieldsValue
from bugcrowd_client.models.event_data_submission_updated_changes_cvss_vector_id import EventDataSubmissionUpdatedChangesCvssVectorId
from bugcrowd_client.models.event_data_submission_updated_changes_duplicate import EventDataSubmissionUpdatedChangesDuplicate
from bugcrowd_client.models.event_data_submission_updated_changes_encrypted_bug_url import EventDataSubmissionUpdatedChangesEncryptedBugUrl
from bugcrowd_client.models.event_data_submission_updated_changes_severity import EventDataSubmissionUpdatedChangesSeverity
from bugcrowd_client.models.event_data_submission_updated_changes_title import EventDataSubmissionUpdatedChangesTitle
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EventDataSubmissionUpdatedChanges(BaseModel):
    """
    EventDataSubmissionUpdatedChanges
    """ # noqa: E501
    custom_fields: Optional[Dict[str, EventDataSubmissionUpdatedChangesCustomFieldsValue]] = None
    cvss_vector_id: Optional[EventDataSubmissionUpdatedChangesCvssVectorId] = None
    duplicate: Optional[EventDataSubmissionUpdatedChangesDuplicate] = None
    duplicate_of_id: Optional[EventDataSubmissionUpdatedChangesCvssVectorId] = None
    encrypted_bug_url: Optional[EventDataSubmissionUpdatedChangesEncryptedBugUrl] = None
    encrypted_description: Optional[EventDataSubmissionUpdatedChangesEncryptedBugUrl] = None
    encrypted_extra_info: Optional[EventDataSubmissionUpdatedChangesEncryptedBugUrl] = None
    encrypted_http_request: Optional[EventDataSubmissionUpdatedChangesEncryptedBugUrl] = None
    remediation_advice: Optional[EventDataSubmissionUpdatedChangesCustomFieldsValue] = None
    remediation_advice_edited: Optional[EventDataSubmissionUpdatedChangesDuplicate] = None
    target_id: Optional[EventDataSubmissionUpdatedChangesCvssVectorId] = None
    title: Optional[EventDataSubmissionUpdatedChangesTitle] = None
    vrt_id: Optional[EventDataSubmissionUpdatedChangesCustomFieldsValue] = None
    vrt_version: Optional[EventDataSubmissionUpdatedChangesTitle] = None
    vulnerability_references: Optional[EventDataSubmissionUpdatedChangesCustomFieldsValue] = None
    vulnerability_refs_edited: Optional[EventDataSubmissionUpdatedChangesDuplicate] = None
    state: Optional[EventDataSubmissionUpdatedChangesCustomFieldsValue] = None
    severity: Optional[EventDataSubmissionUpdatedChangesSeverity] = None
    __properties: ClassVar[List[str]] = ["custom_fields", "cvss_vector_id", "duplicate", "duplicate_of_id", "encrypted_bug_url", "encrypted_description", "encrypted_extra_info", "encrypted_http_request", "remediation_advice", "remediation_advice_edited", "target_id", "title", "vrt_id", "vrt_version", "vulnerability_references", "vulnerability_refs_edited", "state", "severity"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EventDataSubmissionUpdatedChanges from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in custom_fields (dict)
        _field_dict = {}
        if self.custom_fields:
            for _key in self.custom_fields:
                if self.custom_fields[_key]:
                    _field_dict[_key] = self.custom_fields[_key].to_dict()
            _dict['custom_fields'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of cvss_vector_id
        if self.cvss_vector_id:
            _dict['cvss_vector_id'] = self.cvss_vector_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duplicate
        if self.duplicate:
            _dict['duplicate'] = self.duplicate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duplicate_of_id
        if self.duplicate_of_id:
            _dict['duplicate_of_id'] = self.duplicate_of_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encrypted_bug_url
        if self.encrypted_bug_url:
            _dict['encrypted_bug_url'] = self.encrypted_bug_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encrypted_description
        if self.encrypted_description:
            _dict['encrypted_description'] = self.encrypted_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encrypted_extra_info
        if self.encrypted_extra_info:
            _dict['encrypted_extra_info'] = self.encrypted_extra_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encrypted_http_request
        if self.encrypted_http_request:
            _dict['encrypted_http_request'] = self.encrypted_http_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remediation_advice
        if self.remediation_advice:
            _dict['remediation_advice'] = self.remediation_advice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remediation_advice_edited
        if self.remediation_advice_edited:
            _dict['remediation_advice_edited'] = self.remediation_advice_edited.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_id
        if self.target_id:
            _dict['target_id'] = self.target_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of title
        if self.title:
            _dict['title'] = self.title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vrt_id
        if self.vrt_id:
            _dict['vrt_id'] = self.vrt_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vrt_version
        if self.vrt_version:
            _dict['vrt_version'] = self.vrt_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vulnerability_references
        if self.vulnerability_references:
            _dict['vulnerability_references'] = self.vulnerability_references.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vulnerability_refs_edited
        if self.vulnerability_refs_edited:
            _dict['vulnerability_refs_edited'] = self.vulnerability_refs_edited.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of severity
        if self.severity:
            _dict['severity'] = self.severity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EventDataSubmissionUpdatedChanges from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "custom_fields": dict(
                (_k, EventDataSubmissionUpdatedChangesCustomFieldsValue.from_dict(_v))
                for _k, _v in obj.get("custom_fields").items()
            )
            if obj.get("custom_fields") is not None
            else None,
            "cvss_vector_id": EventDataSubmissionUpdatedChangesCvssVectorId.from_dict(obj.get("cvss_vector_id")) if obj.get("cvss_vector_id") is not None else None,
            "duplicate": EventDataSubmissionUpdatedChangesDuplicate.from_dict(obj.get("duplicate")) if obj.get("duplicate") is not None else None,
            "duplicate_of_id": EventDataSubmissionUpdatedChangesCvssVectorId.from_dict(obj.get("duplicate_of_id")) if obj.get("duplicate_of_id") is not None else None,
            "encrypted_bug_url": EventDataSubmissionUpdatedChangesEncryptedBugUrl.from_dict(obj.get("encrypted_bug_url")) if obj.get("encrypted_bug_url") is not None else None,
            "encrypted_description": EventDataSubmissionUpdatedChangesEncryptedBugUrl.from_dict(obj.get("encrypted_description")) if obj.get("encrypted_description") is not None else None,
            "encrypted_extra_info": EventDataSubmissionUpdatedChangesEncryptedBugUrl.from_dict(obj.get("encrypted_extra_info")) if obj.get("encrypted_extra_info") is not None else None,
            "encrypted_http_request": EventDataSubmissionUpdatedChangesEncryptedBugUrl.from_dict(obj.get("encrypted_http_request")) if obj.get("encrypted_http_request") is not None else None,
            "remediation_advice": EventDataSubmissionUpdatedChangesCustomFieldsValue.from_dict(obj.get("remediation_advice")) if obj.get("remediation_advice") is not None else None,
            "remediation_advice_edited": EventDataSubmissionUpdatedChangesDuplicate.from_dict(obj.get("remediation_advice_edited")) if obj.get("remediation_advice_edited") is not None else None,
            "target_id": EventDataSubmissionUpdatedChangesCvssVectorId.from_dict(obj.get("target_id")) if obj.get("target_id") is not None else None,
            "title": EventDataSubmissionUpdatedChangesTitle.from_dict(obj.get("title")) if obj.get("title") is not None else None,
            "vrt_id": EventDataSubmissionUpdatedChangesCustomFieldsValue.from_dict(obj.get("vrt_id")) if obj.get("vrt_id") is not None else None,
            "vrt_version": EventDataSubmissionUpdatedChangesTitle.from_dict(obj.get("vrt_version")) if obj.get("vrt_version") is not None else None,
            "vulnerability_references": EventDataSubmissionUpdatedChangesCustomFieldsValue.from_dict(obj.get("vulnerability_references")) if obj.get("vulnerability_references") is not None else None,
            "vulnerability_refs_edited": EventDataSubmissionUpdatedChangesDuplicate.from_dict(obj.get("vulnerability_refs_edited")) if obj.get("vulnerability_refs_edited") is not None else None,
            "state": EventDataSubmissionUpdatedChangesCustomFieldsValue.from_dict(obj.get("state")) if obj.get("state") is not None else None,
            "severity": EventDataSubmissionUpdatedChangesSeverity.from_dict(obj.get("severity")) if obj.get("severity") is not None else None
        })
        return _obj


